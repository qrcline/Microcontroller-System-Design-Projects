ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC_SAR_Seq_1.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_SAR_Seq_1_Init
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_SAR_Seq_1_Init, %function
  25              	ADC_SAR_Seq_1_Init:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.50
   4:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
  19:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 2


  31:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000000u, 0x00000000u };
  34:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  65:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  67:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  69:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  70:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  72:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  73:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 3


  88:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  28              		.loc 1 95 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  96:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 4


 137:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 168:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  36              		.loc 1 172 0
  37 0002 0321     		movs	r1, #3
  38 0004 0E20     		movs	r0, #14
  39 0006 FFF7FEFF 		bl	CyIntSetPriority
  40              	.LVL0:
 173:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  41              		.loc 1 173 0
  42 000a 4449     		ldr	r1, .L12
  43 000c 0E20     		movs	r0, #14
  44 000e FFF7FEFF 		bl	CyIntSetVector
  45              	.LVL1:
 174:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 176:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
  46              		.loc 1 177 0
  47 0012 0322     		movs	r2, #3
  48 0014 424B     		ldr	r3, .L12+4
  49 0016 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 5


 180:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (((ADC_SAR_Seq_1_PUMP_CTRL_REG & ADC_SAR_Seq_1_PUMP_CTRL_ENABLED) != 0u) ? 
  50              		.loc 1 180 0
  51 0018 424B     		ldr	r3, .L12+8
  52 001a 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
  53              		.loc 1 178 0
  54 001c 002B     		cmp	r3, #0
  55 001e 01DA     		bge	.L10
  56 0020 4149     		ldr	r1, .L12+12
  57 0022 00E0     		b	.L2
  58              	.L10:
  59 0024 4149     		ldr	r1, .L12+16
  60              	.L2:
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
  61              		.loc 1 178 0 is_stmt 0 discriminator 4
  62 0026 424A     		ldr	r2, .L12+20
  63 0028 1368     		ldr	r3, [r2]
  64 002a 0B43     		orrs	r3, r1
  65 002c 1360     		str	r3, [r2]
 181:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
  66              		.loc 1 182 0 is_stmt 1 discriminator 4
  67 002e 414A     		ldr	r2, .L12+24
  68 0030 414B     		ldr	r3, .L12+28
  69 0032 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
  70              		.loc 1 183 0 discriminator 4
  71 0034 414A     		ldr	r2, .L12+32
  72 0036 424B     		ldr	r3, .L12+36
  73 0038 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
  74              		.loc 1 184 0 discriminator 4
  75 003a 0023     		movs	r3, #0
  76 003c 414A     		ldr	r2, .L12+40
  77 003e 1360     		str	r3, [r2]
 185:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
  78              		.loc 1 185 0 discriminator 4
  79 0040 414A     		ldr	r2, .L12+44
  80 0042 4249     		ldr	r1, .L12+48
  81 0044 0A60     		str	r2, [r1]
 186:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
  82              		.loc 1 186 0 discriminator 4
  83 0046 4249     		ldr	r1, .L12+52
  84 0048 0A60     		str	r2, [r1]
 187:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 188:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
  85              		.loc 1 190 0 discriminator 4
  86 004a 424A     		ldr	r2, .L12+56
  87 004c 1168     		ldr	r1, [r2]
  88 004e 8020     		movs	r0, #128
  89 0050 4002     		lsls	r0, r0, #9
  90 0052 0143     		orrs	r1, r0
  91 0054 1160     		str	r1, [r2]
 191:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 6


 193:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
  92              		.loc 1 193 0 discriminator 4
  93 0056 4049     		ldr	r1, .L12+60
  94 0058 0A68     		ldr	r2, [r1]
  95 005a 0243     		orrs	r2, r0
  96 005c 0A60     		str	r2, [r1]
 194:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
  97              		.loc 1 197 0 discriminator 4
  98 005e 3F4A     		ldr	r2, .L12+64
  99 0060 1360     		str	r3, [r2]
 198:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 100              		.loc 1 198 0 discriminator 4
 101 0062 3F4A     		ldr	r2, .L12+68
 102 0064 1360     		str	r3, [r2]
 199:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 103              		.loc 1 199 0 discriminator 4
 104 0066 0133     		adds	r3, r3, #1
 105 0068 3E4A     		ldr	r2, .L12+72
 106 006a 1360     		str	r3, [r2]
 200:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 201:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 107              		.loc 1 202 0 discriminator 4
 108 006c 0221     		movs	r1, #2
 109 006e 3E4A     		ldr	r2, .L12+76
 110 0070 1160     		str	r1, [r2]
 203:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 205:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 111              		.loc 1 206 0 discriminator 4
 112 0072 3E49     		ldr	r1, .L12+80
 113 0074 0868     		ldr	r0, [r1]
 114              	.LVL2:
 207:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 115              		.loc 1 207 0 discriminator 4
 116 0076 3E4A     		ldr	r2, .L12+84
 117 0078 0240     		ands	r2, r0
 118              	.LVL3:
 208:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 209:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 119              		.loc 1 213 0 discriminator 4
 120 007a 1343     		orrs	r3, r2
 121              	.LVL4:
 214:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 216:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 219:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 7


 220:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 221:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 222:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 226:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 122              		.loc 1 226 0 discriminator 4
 123 007c 0B60     		str	r3, [r1]
 124              	.LVL5:
 227:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 228:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 232:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 125              		.loc 1 232 0 discriminator 4
 126 007e 0022     		movs	r2, #0
 127 0080 48E0     		b	.L3
 128              	.LVL6:
 129              	.L9:
 233:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 234:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 130              		.loc 1 234 0
 131 0082 3C48     		ldr	r0, .L12+88
 132 0084 9100     		lsls	r1, r2, #2
 133 0086 0C58     		ldr	r4, [r1, r0]
 134 0088 DC23     		movs	r3, #220
 135 008a 9B01     		lsls	r3, r3, #6
 136 008c 2340     		ands	r3, r4
 137              	.LVL7:
 235:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 138              		.loc 1 236 0
 139 008e 8018     		adds	r0, r0, r2
 140 0090 007A     		ldrb	r0, [r0, #8]
 141 0092 0343     		orrs	r3, r0
 142              	.LVL8:
 237:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 239:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 240:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 244:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 249:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 143              		.loc 1 253 0
 144 0094 3848     		ldr	r0, .L12+92
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 8


 145 0096 8446     		mov	ip, r0
 146 0098 6144     		add	r1, r1, ip
 147 009a 0B60     		str	r3, [r1]
 254:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 255:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 148              		.loc 1 255 0
 149 009c E307     		lsls	r3, r4, #31
 150 009e 07D5     		bpl	.L4
 151              	.LVL9:
 256:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 257:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 152              		.loc 1 257 0
 153 00a0 2E48     		ldr	r0, .L12+64
 154 00a2 0168     		ldr	r1, [r0]
 155              	.LVL10:
 156 00a4 0123     		movs	r3, #1
 157 00a6 9340     		lsls	r3, r3, r2
 158 00a8 1B04     		lsls	r3, r3, #16
 159 00aa 1B0C     		lsrs	r3, r3, #16
 160 00ac 0B43     		orrs	r3, r1
 161 00ae 0360     		str	r3, [r0]
 162              	.LVL11:
 163              	.L4:
 258:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 259:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 260:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 164              		.loc 1 260 0
 165 00b0 9300     		lsls	r3, r2, #2
 166 00b2 3049     		ldr	r1, .L12+88
 167              	.LVL12:
 168 00b4 5B58     		ldr	r3, [r3, r1]
 169 00b6 9B07     		lsls	r3, r3, #30
 170 00b8 07D5     		bpl	.L5
 261:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 262:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 171              		.loc 1 262 0
 172 00ba 2948     		ldr	r0, .L12+68
 173 00bc 0168     		ldr	r1, [r0]
 174              	.LVL13:
 175 00be 0123     		movs	r3, #1
 176 00c0 9340     		lsls	r3, r3, r2
 177 00c2 1B04     		lsls	r3, r3, #16
 178 00c4 1B0C     		lsrs	r3, r3, #16
 179 00c6 0B43     		orrs	r3, r1
 180 00c8 0360     		str	r3, [r0]
 181              	.L5:
 263:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 264:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 265:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 267:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 268:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 269:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 270:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 272:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 9


 274:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 275:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 276:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 277:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 279:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 280:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 282:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 182              		.loc 1 282 0
 183 00ca 9300     		lsls	r3, r2, #2
 184 00cc 2949     		ldr	r1, .L12+88
 185              	.LVL14:
 186 00ce 5958     		ldr	r1, [r3, r1]
 187              	.LVL15:
 188 00d0 8B05     		lsls	r3, r1, #22
 189 00d2 02D5     		bpl	.L11
 283:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 284:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 190              		.loc 1 284 0
 191 00d4 8020     		movs	r0, #128
 192 00d6 4000     		lsls	r0, r0, #1
 193 00d8 01E0     		b	.L6
 194              	.L11:
 285:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 286:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 287:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 288:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 195              		.loc 1 288 0
 196 00da 8020     		movs	r0, #128
 197 00dc 4001     		lsls	r0, r0, #5
 198              	.L6:
 199              	.LVL16:
 289:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 290:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 291:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 200              		.loc 1 291 0
 201 00de CB05     		lsls	r3, r1, #23
 202 00e0 04D4     		bmi	.L7
 292:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 293:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 295:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 298:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 203              		.loc 1 298 0
 204 00e2 5300     		lsls	r3, r2, #1
 205 00e4 0024     		movs	r4, #0
 206              	.LVL17:
 207 00e6 2549     		ldr	r1, .L12+96
 208 00e8 5C52     		strh	r4, [r3, r1]
 209 00ea 03E0     		b	.L8
 210              	.LVL18:
 211              	.L7:
 299:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 300:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 10


 301:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 303:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 307:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 212              		.loc 1 307 0
 213 00ec 5300     		lsls	r3, r2, #1
 214 00ee 0024     		movs	r4, #0
 215              	.LVL19:
 216 00f0 2249     		ldr	r1, .L12+96
 217 00f2 5C52     		strh	r4, [r3, r1]
 218              	.L8:
 308:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 309:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 310:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 219              		.loc 1 311 0 discriminator 2
 220 00f4 224B     		ldr	r3, .L12+100
 221 00f6 4343     		muls	r3, r0
 222 00f8 8021     		movs	r1, #128
 223 00fa C900     		lsls	r1, r1, #3
 224 00fc 8C46     		mov	ip, r1
 225 00fe 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 226              		.loc 1 312 0 discriminator 2
 227 0100 D917     		asrs	r1, r3, #31
 228 0102 4905     		lsls	r1, r1, #21
 229 0104 490D     		lsrs	r1, r1, #21
 230 0106 CB18     		adds	r3, r1, r3
 231 0108 DB12     		asrs	r3, r3, #11
 311:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 232              		.loc 1 311 0 discriminator 2
 233 010a 1BB2     		sxth	r3, r3
 234 010c 9000     		lsls	r0, r2, #2
 235              	.LVL20:
 236 010e 1D49     		ldr	r1, .L12+104
 237 0110 4350     		str	r3, [r0, r1]
 232:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 238              		.loc 1 232 0 discriminator 2
 239 0112 0132     		adds	r2, r2, #1
 240              	.LVL21:
 241              	.L3:
 232:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 242              		.loc 1 232 0 is_stmt 0 discriminator 1
 243 0114 012A     		cmp	r2, #1
 244 0116 B4D9     		bls	.L9
 313:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 314:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 245              		.loc 1 314 0 is_stmt 1
 246              		@ sp needed
 247 0118 10BD     		pop	{r4, pc}
 248              	.L13:
 249 011a C046     		.align	2
 250              	.L12:
 251 011c 00000000 		.word	ADC_SAR_Seq_1_ISR
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 11


 252 0120 20001A40 		.word	1075445792
 253 0124 80031A40 		.word	1075446656
 254 0128 C0201010 		.word	269492416
 255 012c C0200010 		.word	268443840
 256 0130 00001A40 		.word	1075445760
 257 0134 8C000080 		.word	-2147483508
 258 0138 04001A40 		.word	1075445764
 259 013c 0000FF07 		.word	134152192
 260 0140 18001A40 		.word	1075445784
 261 0144 1C001A40 		.word	1075445788
 262 0148 04000400 		.word	262148
 263 014c 10001A40 		.word	1075445776
 264 0150 14001A40 		.word	1075445780
 265 0154 00031A40 		.word	1075446528
 266 0158 40031A40 		.word	1075446592
 267 015c 28021A40 		.word	1075446312
 268 0160 38021A40 		.word	1075446328
 269 0164 18021A40 		.word	1075446296
 270 0168 000F1A40 		.word	1075449600
 271 016c 30001A40 		.word	1075445808
 272 0170 FFFFFFDF 		.word	-536870913
 273 0174 00000000 		.word	.LANCHOR0
 274 0178 80001A40 		.word	1075445888
 275 017c 00000000 		.word	ADC_SAR_Seq_1_offset
 276 0180 10270000 		.word	10000
 277 0184 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 278              		.cfi_endproc
 279              	.LFE1:
 280              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 281              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 282              		.align	2
 283              		.global	ADC_SAR_Seq_1_Enable
 284              		.code	16
 285              		.thumb_func
 286              		.type	ADC_SAR_Seq_1_Enable, %function
 287              	ADC_SAR_Seq_1_Enable:
 288              	.LFB2:
 315:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 316:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 320:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 321:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 325:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 331:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 289              		.loc 1 331 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 12


 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293 0000 10B5     		push	{r4, lr}
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 4, -8
 296              		.cfi_offset 14, -4
 332:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 297              		.loc 1 332 0
 298 0002 074B     		ldr	r3, .L16
 299 0004 1B68     		ldr	r3, [r3]
 300 0006 002B     		cmp	r3, #0
 301 0008 08DB     		blt	.L14
 333:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 334:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 337:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 338:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 340:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 342:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 302              		.loc 1 342 0
 303 000a 054A     		ldr	r2, .L16
 304 000c 1368     		ldr	r3, [r2]
 305 000e 8021     		movs	r1, #128
 306 0010 0906     		lsls	r1, r1, #24
 307 0012 0B43     		orrs	r3, r1
 308 0014 1360     		str	r3, [r2]
 343:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 344:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 309              		.loc 1 345 0
 310 0016 0A20     		movs	r0, #10
 311 0018 FFF7FEFF 		bl	CyDelayUs
 312              	.LVL22:
 313              	.L14:
 346:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 347:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 314              		.loc 1 347 0
 315              		@ sp needed
 316 001c 10BD     		pop	{r4, pc}
 317              	.L17:
 318 001e C046     		.align	2
 319              	.L16:
 320 0020 00001A40 		.word	1075445760
 321              		.cfi_endproc
 322              	.LFE2:
 323              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 324              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
 325              		.align	2
 326              		.global	ADC_SAR_Seq_1_Start
 327              		.code	16
 328              		.thumb_func
 329              		.type	ADC_SAR_Seq_1_Start, %function
 330              	ADC_SAR_Seq_1_Start:
 331              	.LFB0:
  64:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 13


 332              		.loc 1 64 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 10B5     		push	{r4, lr}
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
  66:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 340              		.loc 1 66 0
 341 0002 064B     		ldr	r3, .L20
 342 0004 1B78     		ldrb	r3, [r3]
 343 0006 002B     		cmp	r3, #0
 344 0008 04D1     		bne	.L19
  68:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
 345              		.loc 1 68 0
 346 000a FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
 347              	.LVL23:
  69:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 348              		.loc 1 69 0
 349 000e 0122     		movs	r2, #1
 350 0010 024B     		ldr	r3, .L20
 351 0012 1A70     		strb	r2, [r3]
 352              	.L19:
  71:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 353              		.loc 1 71 0
 354 0014 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
 355              	.LVL24:
  72:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 356              		.loc 1 72 0
 357              		@ sp needed
 358 0018 10BD     		pop	{r4, pc}
 359              	.L21:
 360 001a C046     		.align	2
 361              	.L20:
 362 001c 00000000 		.word	.LANCHOR1
 363              		.cfi_endproc
 364              	.LFE0:
 365              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
 366              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 367              		.align	2
 368              		.global	ADC_SAR_Seq_1_Stop
 369              		.code	16
 370              		.thumb_func
 371              		.type	ADC_SAR_Seq_1_Stop, %function
 372              	ADC_SAR_Seq_1_Stop:
 373              	.LFB3:
 348:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 349:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 350:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 352:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 354:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 355:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 357:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 14


 358:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 360:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 361:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 362:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 363:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 364:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 366:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 374              		.loc 1 366 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 367:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 379              		.loc 1 367 0
 380 0000 024A     		ldr	r2, .L23
 381 0002 1368     		ldr	r3, [r2]
 382 0004 5B00     		lsls	r3, r3, #1
 383 0006 5B08     		lsrs	r3, r3, #1
 384 0008 1360     		str	r3, [r2]
 368:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 385              		.loc 1 368 0
 386              		@ sp needed
 387 000a 7047     		bx	lr
 388              	.L24:
 389              		.align	2
 390              	.L23:
 391 000c 00001A40 		.word	1075445760
 392              		.cfi_endproc
 393              	.LFE3:
 394              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 395              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 396              		.align	2
 397              		.global	ADC_SAR_Seq_1_StartConvert
 398              		.code	16
 399              		.thumb_func
 400              		.type	ADC_SAR_Seq_1_StartConvert, %function
 401              	ADC_SAR_Seq_1_StartConvert:
 402              	.LFB4:
 369:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 370:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 371:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 373:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 375:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 376:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 377:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 384:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 15


 386:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 387:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 388:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 389:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 390:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 392:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 403              		.loc 1 392 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 393:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 394:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 408              		.loc 1 394 0
 409 0000 034A     		ldr	r2, .L26
 410 0002 1368     		ldr	r3, [r2]
 411 0004 8021     		movs	r1, #128
 412 0006 4902     		lsls	r1, r1, #9
 413 0008 0B43     		orrs	r3, r1
 414 000a 1360     		str	r3, [r2]
 395:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 398:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 399:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 415              		.loc 1 399 0
 416              		@ sp needed
 417 000c 7047     		bx	lr
 418              	.L27:
 419 000e C046     		.align	2
 420              	.L26:
 421 0010 04001A40 		.word	1075445764
 422              		.cfi_endproc
 423              	.LFE4:
 424              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 425              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 426              		.align	2
 427              		.global	ADC_SAR_Seq_1_StopConvert
 428              		.code	16
 429              		.thumb_func
 430              		.type	ADC_SAR_Seq_1_StopConvert, %function
 431              	ADC_SAR_Seq_1_StopConvert:
 432              	.LFB5:
 400:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 401:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 402:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 404:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 406:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 407:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 409:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 411:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 412:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 16


 413:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 414:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 415:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 417:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 433              		.loc 1 417 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 418:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 419:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 438              		.loc 1 419 0
 439 0000 024A     		ldr	r2, .L29
 440 0002 1168     		ldr	r1, [r2]
 441 0004 024B     		ldr	r3, .L29+4
 442 0006 0B40     		ands	r3, r1
 443 0008 1360     		str	r3, [r2]
 420:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 421:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 444              		.loc 1 421 0
 445              		@ sp needed
 446 000a 7047     		bx	lr
 447              	.L30:
 448              		.align	2
 449              	.L29:
 450 000c 04001A40 		.word	1075445764
 451 0010 FFFFFEFF 		.word	-65537
 452              		.cfi_endproc
 453              	.LFE5:
 454              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 455              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 456              		.align	2
 457              		.global	ADC_SAR_Seq_1_IsEndConversion
 458              		.code	16
 459              		.thumb_func
 460              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 461              	ADC_SAR_Seq_1_IsEndConversion:
 462              	.LFB6:
 422:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 423:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 424:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 426:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 428:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 429:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 436:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 437:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 17


 440:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 445:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 446:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 449:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 463              		.loc 1 451 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL25:
 469 0000 0200     		movs	r2, r0
 470              	.LVL26:
 452:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 453:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 471              		.loc 1 454 0
 472 0002 8307     		lsls	r3, r0, #30
 473 0004 0CD0     		beq	.L35
 474              	.LVL27:
 475              	.L34:
 455:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 456:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 457:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 458:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 476              		.loc 1 458 0 discriminator 2
 477 0006 074B     		ldr	r3, .L36
 478 0008 1B68     		ldr	r3, [r3]
 479 000a 0120     		movs	r0, #1
 480 000c 1840     		ands	r0, r3
 481              	.LVL28:
 459:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 482              		.loc 1 459 0 discriminator 2
 483 000e 01D1     		bne	.L33
 484              		.loc 1 459 0 is_stmt 0 discriminator 1
 485 0010 9307     		lsls	r3, r2, #30
 486 0012 F8D4     		bmi	.L34
 487              	.L33:
 460:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 461:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 488              		.loc 1 461 0 is_stmt 1
 489 0014 0028     		cmp	r0, #0
 490 0016 04D0     		beq	.L32
 462:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 463:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 491              		.loc 1 464 0
 492 0018 0122     		movs	r2, #1
 493              	.LVL29:
 494 001a 024B     		ldr	r3, .L36
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 18


 495 001c 1A60     		str	r2, [r3]
 496 001e 00E0     		b	.L32
 497              	.LVL30:
 498              	.L35:
 452:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 499              		.loc 1 452 0
 500 0020 0020     		movs	r0, #0
 501              	.LVL31:
 502              	.L32:
 465:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 466:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 467:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 468:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 471:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 472:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 473:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 477:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 479:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 482:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 483:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 485:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 486:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 503              		.loc 1 486 0
 504              		@ sp needed
 505 0022 7047     		bx	lr
 506              	.L37:
 507              		.align	2
 508              	.L36:
 509 0024 10021A40 		.word	1075446288
 510              		.cfi_endproc
 511              	.LFE6:
 512              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 513              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 514              		.align	2
 515              		.global	ADC_SAR_Seq_1_GetResult16
 516              		.code	16
 517              		.thumb_func
 518              		.type	ADC_SAR_Seq_1_GetResult16, %function
 519              	ADC_SAR_Seq_1_GetResult16:
 520              	.LFB7:
 487:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 488:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 489:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 491:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 493:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 494:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 19


 495:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 496:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 500:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 501:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 503:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 521              		.loc 1 505 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              	.LVL32:
 526 0000 10B5     		push	{r4, lr}
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 4, -8
 529              		.cfi_offset 14, -4
 530 0002 0400     		movs	r4, r0
 506:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 508:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 531              		.loc 1 509 0
 532 0004 0128     		cmp	r0, #1
 533 0006 02D9     		bls	.L39
 534              		.loc 1 509 0 is_stmt 0 discriminator 1
 535 0008 0020     		movs	r0, #0
 536              	.LVL33:
 537 000a FFF7FEFF 		bl	CyHalt
 538              	.LVL34:
 539              	.L39:
 510:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 511:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 540              		.loc 1 511 0 is_stmt 1
 541 000e 012C     		cmp	r4, #1
 542 0010 07D8     		bhi	.L41
 512:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 513:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 543              		.loc 1 513 0
 544 0012 A400     		lsls	r4, r4, #2
 545              	.LVL35:
 546 0014 044B     		ldr	r3, .L42
 547 0016 9C46     		mov	ip, r3
 548 0018 6444     		add	r4, r4, ip
 549 001a 2068     		ldr	r0, [r4]
 550 001c 0004     		lsls	r0, r0, #16
 551 001e 000C     		lsrs	r0, r0, #16
 552              	.LVL36:
 553 0020 00E0     		b	.L40
 554              	.LVL37:
 555              	.L41:
 514:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 516:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 20


 517:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 518:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 521:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 556              		.loc 1 521 0
 557 0022 0020     		movs	r0, #0
 558              	.LVL38:
 559              	.L40:
 522:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 524:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 525:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 560              		.loc 1 525 0
 561 0024 00B2     		sxth	r0, r0
 562              	.LVL39:
 526:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 563              		.loc 1 526 0
 564              		@ sp needed
 565 0026 10BD     		pop	{r4, pc}
 566              	.L43:
 567              		.align	2
 568              	.L42:
 569 0028 80011A40 		.word	1075446144
 570              		.cfi_endproc
 571              	.LFE7:
 572              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 573              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 574              		.align	2
 575              		.global	ADC_SAR_Seq_1_SetChanMask
 576              		.code	16
 577              		.thumb_func
 578              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 579              	ADC_SAR_Seq_1_SetChanMask:
 580              	.LFB8:
 527:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 528:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 529:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 531:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 533:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 534:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 536:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 545:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 546:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 547:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 21


 549:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 581              		.loc 1 550 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586              	.LVL40:
 551:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 587              		.loc 1 551 0
 588 0000 0323     		movs	r3, #3
 589 0002 1840     		ands	r0, r3
 590              	.LVL41:
 591 0004 014B     		ldr	r3, .L45
 592 0006 1860     		str	r0, [r3]
 552:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 593              		.loc 1 552 0
 594              		@ sp needed
 595 0008 7047     		bx	lr
 596              	.L46:
 597 000a C046     		.align	2
 598              	.L45:
 599 000c 20001A40 		.word	1075445792
 600              		.cfi_endproc
 601              	.LFE8:
 602              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 603              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 604              		.align	2
 605              		.global	ADC_SAR_Seq_1_SetLowLimit
 606              		.code	16
 607              		.thumb_func
 608              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 609              	ADC_SAR_Seq_1_SetLowLimit:
 610              	.LFB9:
 553:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 554:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 556:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 557:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 559:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 561:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 564:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 566:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 567:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 568:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 569:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 570:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 573:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 575:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 22


 576:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 578:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 579:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 581:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 583:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 584:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 586:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 589:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 590:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 591:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 592:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 611              		.loc 1 594 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              		@ link register save eliminated.
 616              	.LVL42:
 595:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 617              		.loc 1 595 0
 618 0000 054A     		ldr	r2, .L48
 619 0002 1368     		ldr	r3, [r2]
 620 0004 1B0C     		lsrs	r3, r3, #16
 621 0006 1B04     		lsls	r3, r3, #16
 622 0008 1360     		str	r3, [r2]
 596:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 623              		.loc 1 596 0
 624 000a 1368     		ldr	r3, [r2]
 625 000c 0004     		lsls	r0, r0, #16
 626              	.LVL43:
 627 000e 000C     		lsrs	r0, r0, #16
 628 0010 1843     		orrs	r0, r3
 629 0012 1060     		str	r0, [r2]
 597:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 630              		.loc 1 597 0
 631              		@ sp needed
 632 0014 7047     		bx	lr
 633              	.L49:
 634 0016 C046     		.align	2
 635              	.L48:
 636 0018 18001A40 		.word	1075445784
 637              		.cfi_endproc
 638              	.LFE9:
 639              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 640              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 641              		.align	2
 642              		.global	ADC_SAR_Seq_1_SetHighLimit
 643              		.code	16
 644              		.thumb_func
 645              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 23


 646              	ADC_SAR_Seq_1_SetHighLimit:
 647              	.LFB10:
 598:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 599:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 600:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 602:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 604:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 605:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 607:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 610:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 611:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 612:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 648              		.loc 1 615 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              		@ link register save eliminated.
 653              	.LVL44:
 616:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 654              		.loc 1 616 0
 655 0000 044A     		ldr	r2, .L51
 656 0002 1368     		ldr	r3, [r2]
 657 0004 1B04     		lsls	r3, r3, #16
 658 0006 1B0C     		lsrs	r3, r3, #16
 659 0008 1360     		str	r3, [r2]
 617:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 660              		.loc 1 617 0
 661 000a 1368     		ldr	r3, [r2]
 662 000c 0004     		lsls	r0, r0, #16
 663              	.LVL45:
 664 000e 1843     		orrs	r0, r3
 665 0010 1060     		str	r0, [r2]
 618:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 666              		.loc 1 618 0
 667              		@ sp needed
 668 0012 7047     		bx	lr
 669              	.L52:
 670              		.align	2
 671              	.L51:
 672 0014 18001A40 		.word	1075445784
 673              		.cfi_endproc
 674              	.LFE10:
 675              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 676              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 677              		.align	2
 678              		.global	ADC_SAR_Seq_1_SetLimitMask
 679              		.code	16
 680              		.thumb_func
 681              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 24


 682              	ADC_SAR_Seq_1_SetLimitMask:
 683              	.LFB11:
 619:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 620:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 621:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 623:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 626:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 628:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 634:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 635:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 636:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 637:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 684              		.loc 1 639 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689              	.LVL46:
 640:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 690              		.loc 1 640 0
 691 0000 0323     		movs	r3, #3
 692 0002 1840     		ands	r0, r3
 693              	.LVL47:
 694 0004 014B     		ldr	r3, .L54
 695 0006 1860     		str	r0, [r3]
 641:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 696              		.loc 1 641 0
 697              		@ sp needed
 698 0008 7047     		bx	lr
 699              	.L55:
 700 000a C046     		.align	2
 701              	.L54:
 702 000c 38021A40 		.word	1075446328
 703              		.cfi_endproc
 704              	.LFE11:
 705              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 706              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 707              		.align	2
 708              		.global	ADC_SAR_Seq_1_SetSatMask
 709              		.code	16
 710              		.thumb_func
 711              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 712              	ADC_SAR_Seq_1_SetSatMask:
 713              	.LFB12:
 642:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 643:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 25


 644:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 646:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 648:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 649:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 651:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 657:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 658:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 659:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 660:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 714              		.loc 1 662 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 0
 717              		@ frame_needed = 0, uses_anonymous_args = 0
 718              		@ link register save eliminated.
 719              	.LVL48:
 663:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 720              		.loc 1 663 0
 721 0000 0323     		movs	r3, #3
 722 0002 1840     		ands	r0, r3
 723              	.LVL49:
 724 0004 014B     		ldr	r3, .L57
 725 0006 1860     		str	r0, [r3]
 664:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 726              		.loc 1 664 0
 727              		@ sp needed
 728 0008 7047     		bx	lr
 729              	.L58:
 730 000a C046     		.align	2
 731              	.L57:
 732 000c 28021A40 		.word	1075446312
 733              		.cfi_endproc
 734              	.LFE12:
 735              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 736              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 737              		.align	2
 738              		.global	ADC_SAR_Seq_1_SetOffset
 739              		.code	16
 740              		.thumb_func
 741              		.type	ADC_SAR_Seq_1_SetOffset, %function
 742              	ADC_SAR_Seq_1_SetOffset:
 743              	.LFB13:
 665:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 666:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 667:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 669:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 26


 671:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 672:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 677:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 682:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 683:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 684:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 685:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 688:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 744              		.loc 1 690 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              	.LVL50:
 749 0000 70B5     		push	{r4, r5, r6, lr}
 750              		.cfi_def_cfa_offset 16
 751              		.cfi_offset 4, -16
 752              		.cfi_offset 5, -12
 753              		.cfi_offset 6, -8
 754              		.cfi_offset 14, -4
 755 0002 0400     		movs	r4, r0
 756 0004 0D00     		movs	r5, r1
 691:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 757              		.loc 1 692 0
 758 0006 0128     		cmp	r0, #1
 759 0008 02D9     		bls	.L60
 760              		.loc 1 692 0 is_stmt 0 discriminator 1
 761 000a 0020     		movs	r0, #0
 762              	.LVL51:
 763 000c FFF7FEFF 		bl	CyHalt
 764              	.LVL52:
 765              	.L60:
 693:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 694:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 766              		.loc 1 694 0 is_stmt 1
 767 0010 6400     		lsls	r4, r4, #1
 768              	.LVL53:
 769 0012 014B     		ldr	r3, .L61
 770 0014 E552     		strh	r5, [r4, r3]
 695:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 771              		.loc 1 695 0
 772              		@ sp needed
 773 0016 70BD     		pop	{r4, r5, r6, pc}
 774              	.L62:
 775              		.align	2
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 27


 776              	.L61:
 777 0018 00000000 		.word	ADC_SAR_Seq_1_offset
 778              		.cfi_endproc
 779              	.LFE13:
 780              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 781              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 782              		.align	2
 783              		.global	ADC_SAR_Seq_1_SetGain
 784              		.code	16
 785              		.thumb_func
 786              		.type	ADC_SAR_Seq_1_SetGain, %function
 787              	ADC_SAR_Seq_1_SetGain:
 788              	.LFB14:
 696:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 698:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 700:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 702:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 703:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 711:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 715:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 716:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 717:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 718:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 722:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 789              		.loc 1 724 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              	.LVL54:
 794 0000 70B5     		push	{r4, r5, r6, lr}
 795              		.cfi_def_cfa_offset 16
 796              		.cfi_offset 4, -16
 797              		.cfi_offset 5, -12
 798              		.cfi_offset 6, -8
 799              		.cfi_offset 14, -4
 800 0002 0400     		movs	r4, r0
 801 0004 0D00     		movs	r5, r1
 725:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 28


 802              		.loc 1 726 0
 803 0006 0128     		cmp	r0, #1
 804 0008 02D9     		bls	.L64
 805              		.loc 1 726 0 is_stmt 0 discriminator 1
 806 000a 0020     		movs	r0, #0
 807              	.LVL55:
 808 000c FFF7FEFF 		bl	CyHalt
 809              	.LVL56:
 810              	.L64:
 727:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 728:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 811              		.loc 1 728 0 is_stmt 1
 812 0010 A400     		lsls	r4, r4, #2
 813              	.LVL57:
 814 0012 014B     		ldr	r3, .L65
 815 0014 E550     		str	r5, [r4, r3]
 729:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 816              		.loc 1 729 0
 817              		@ sp needed
 818              	.LVL58:
 819 0016 70BD     		pop	{r4, r5, r6, pc}
 820              	.L66:
 821              		.align	2
 822              	.L65:
 823 0018 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 824              		.cfi_endproc
 825              	.LFE14:
 826              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 827              		.global	__aeabi_idiv
 828              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 829              		.align	2
 830              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 831              		.code	16
 832              		.thumb_func
 833              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 834              	ADC_SAR_Seq_1_CountsTo_mVolts:
 835              	.LFB15:
 730:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 731:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 732:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 733:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 734:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 735:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 739:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 743:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 747:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 748:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 29


 750:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 836              		.loc 1 757 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              	.LVL59:
 841 0000 70B5     		push	{r4, r5, r6, lr}
 842              		.cfi_def_cfa_offset 16
 843              		.cfi_offset 4, -16
 844              		.cfi_offset 5, -12
 845              		.cfi_offset 6, -8
 846              		.cfi_offset 14, -4
 847 0002 0400     		movs	r4, r0
 848 0004 0D00     		movs	r5, r1
 758:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 760:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 849              		.loc 1 761 0
 850 0006 0128     		cmp	r0, #1
 851 0008 02D9     		bls	.L68
 852              		.loc 1 761 0 is_stmt 0 discriminator 1
 853 000a 0020     		movs	r0, #0
 854              	.LVL60:
 855 000c FFF7FEFF 		bl	CyHalt
 856              	.LVL61:
 857              	.L68:
 762:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 763:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 767:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 769:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 771:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 858              		.loc 1 772 0 is_stmt 1
 859 0010 6300     		lsls	r3, r4, #1
 860 0012 0F4A     		ldr	r2, .L71
 861 0014 995A     		ldrh	r1, [r3, r2]
 862 0016 09B2     		sxth	r1, r1
 863 0018 691A     		subs	r1, r5, r1
 864 001a 09B2     		sxth	r1, r1
 865              	.LVL62:
 773:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 774:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 866              		.loc 1 774 0
 867 001c 0D48     		ldr	r0, .L71+4
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 30


 868 001e 4843     		muls	r0, r1
 775:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 869              		.loc 1 775 0
 870 0020 0029     		cmp	r1, #0
 871 0022 06DD     		ble	.L69
 872              		.loc 1 775 0 is_stmt 0 discriminator 1
 873 0024 A300     		lsls	r3, r4, #2
 874 0026 0C4A     		ldr	r2, .L71+8
 875 0028 9A58     		ldr	r2, [r3, r2]
 876 002a D30F     		lsrs	r3, r2, #31
 877 002c 9A18     		adds	r2, r3, r2
 878 002e 5310     		asrs	r3, r2, #1
 879 0030 06E0     		b	.L70
 880              	.L69:
 881              		.loc 1 775 0 discriminator 2
 882 0032 A300     		lsls	r3, r4, #2
 883 0034 084A     		ldr	r2, .L71+8
 884 0036 9A58     		ldr	r2, [r3, r2]
 885 0038 D30F     		lsrs	r3, r2, #31
 886 003a 9A18     		adds	r2, r3, r2
 887 003c 5210     		asrs	r2, r2, #1
 888 003e 5342     		rsbs	r3, r2, #0
 889              	.L70:
 774:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 890              		.loc 1 774 0 is_stmt 1
 891 0040 1818     		adds	r0, r3, r0
 776:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 892              		.loc 1 776 0
 893 0042 A400     		lsls	r4, r4, #2
 894              	.LVL63:
 895 0044 044B     		ldr	r3, .L71+8
 896 0046 E158     		ldr	r1, [r4, r3]
 897              	.LVL64:
 898 0048 FFF7FEFF 		bl	__aeabi_idiv
 899              	.LVL65:
 774:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 900              		.loc 1 774 0
 901 004c 00B2     		sxth	r0, r0
 902              	.LVL66:
 777:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 778:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 779:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 903              		.loc 1 779 0
 904              		@ sp needed
 905 004e 70BD     		pop	{r4, r5, r6, pc}
 906              	.L72:
 907              		.align	2
 908              	.L71:
 909 0050 00000000 		.word	ADC_SAR_Seq_1_offset
 910 0054 10270000 		.word	10000
 911 0058 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 912              		.cfi_endproc
 913              	.LFE15:
 914              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 915              		.global	__aeabi_lmul
 916              		.global	__aeabi_ldivmod
 917              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 31


 918              		.align	2
 919              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 920              		.code	16
 921              		.thumb_func
 922              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 923              	ADC_SAR_Seq_1_CountsTo_uVolts:
 924              	.LFB16:
 780:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 781:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 786:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 790:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 794:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 795:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 797:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 802:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 809:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 925              		.loc 1 811 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              	.LVL67:
 930 0000 70B5     		push	{r4, r5, r6, lr}
 931              		.cfi_def_cfa_offset 16
 932              		.cfi_offset 4, -16
 933              		.cfi_offset 5, -12
 934              		.cfi_offset 6, -8
 935              		.cfi_offset 14, -4
 936 0002 0500     		movs	r5, r0
 937 0004 0C00     		movs	r4, r1
 812:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 814:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 938              		.loc 1 815 0
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 32


 939 0006 0128     		cmp	r0, #1
 940 0008 02D9     		bls	.L74
 941              		.loc 1 815 0 is_stmt 0 discriminator 1
 942 000a 0020     		movs	r0, #0
 943              	.LVL68:
 944 000c FFF7FEFF 		bl	CyHalt
 945              	.LVL69:
 946              	.L74:
 816:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 817:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 821:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 823:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 825:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 947              		.loc 1 826 0 is_stmt 1
 948 0010 6A00     		lsls	r2, r5, #1
 949 0012 084B     		ldr	r3, .L75
 950 0014 D05A     		ldrh	r0, [r2, r3]
 951 0016 00B2     		sxth	r0, r0
 952 0018 201A     		subs	r0, r4, r0
 953 001a 00B2     		sxth	r0, r0
 954              	.LVL70:
 827:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 828:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 955              		.loc 1 828 0
 956 001c C117     		asrs	r1, r0, #31
 957 001e 064A     		ldr	r2, .L75+4
 958 0020 0023     		movs	r3, #0
 959 0022 FFF7FEFF 		bl	__aeabi_lmul
 960              	.LVL71:
 961 0026 AD00     		lsls	r5, r5, #2
 962              	.LVL72:
 963 0028 044B     		ldr	r3, .L75+8
 964 002a EA58     		ldr	r2, [r5, r3]
 965 002c D317     		asrs	r3, r2, #31
 966 002e FFF7FEFF 		bl	__aeabi_ldivmod
 967              	.LVL73:
 829:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 830:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 831:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 968              		.loc 1 831 0
 969              		@ sp needed
 970 0032 70BD     		pop	{r4, r5, r6, pc}
 971              	.L76:
 972              		.align	2
 973              	.L75:
 974 0034 00000000 		.word	ADC_SAR_Seq_1_offset
 975 0038 80969800 		.word	10000000
 976 003c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 977              		.cfi_endproc
 978              	.LFE16:
 979              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 33


 980              		.global	__aeabi_i2f
 981              		.global	__aeabi_fmul
 982              		.global	__aeabi_fdiv
 983              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 984              		.align	2
 985              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 986              		.code	16
 987              		.thumb_func
 988              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 989              	ADC_SAR_Seq_1_CountsTo_Volts:
 990              	.LFB17:
 832:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 833:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 834:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 838:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 842:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 846:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 847:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 849:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 854:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 991              		.loc 1 856 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              	.LVL74:
 996 0000 70B5     		push	{r4, r5, r6, lr}
 997              		.cfi_def_cfa_offset 16
 998              		.cfi_offset 4, -16
 999              		.cfi_offset 5, -12
 1000              		.cfi_offset 6, -8
 1001              		.cfi_offset 14, -4
 1002 0002 0400     		movs	r4, r0
 1003 0004 0D00     		movs	r5, r1
 857:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 859:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1004              		.loc 1 860 0
 1005 0006 0128     		cmp	r0, #1
 1006 0008 02D9     		bls	.L78
 1007              		.loc 1 860 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 34


 1008 000a 0020     		movs	r0, #0
 1009              	.LVL75:
 1010 000c FFF7FEFF 		bl	CyHalt
 1011              	.LVL76:
 1012              	.L78:
 861:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 862:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 866:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 868:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 870:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1013              		.loc 1 871 0 is_stmt 1
 1014 0010 6200     		lsls	r2, r4, #1
 1015 0012 0A4B     		ldr	r3, .L79
 1016 0014 D05A     		ldrh	r0, [r2, r3]
 1017 0016 00B2     		sxth	r0, r0
 1018 0018 281A     		subs	r0, r5, r0
 1019 001a 00B2     		sxth	r0, r0
 1020              	.LVL77:
 872:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 873:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1021              		.loc 1 873 0
 1022 001c FFF7FEFF 		bl	__aeabi_i2f
 1023              	.LVL78:
 1024 0020 0749     		ldr	r1, .L79+4
 1025 0022 FFF7FEFF 		bl	__aeabi_fmul
 1026              	.LVL79:
 1027 0026 051C     		adds	r5, r0, #0
 1028 0028 A400     		lsls	r4, r4, #2
 1029              	.LVL80:
 1030 002a 064B     		ldr	r3, .L79+8
 1031 002c E058     		ldr	r0, [r4, r3]
 1032 002e FFF7FEFF 		bl	__aeabi_i2f
 1033              	.LVL81:
 1034 0032 011C     		adds	r1, r0, #0
 1035 0034 281C     		adds	r0, r5, #0
 1036 0036 FFF7FEFF 		bl	__aeabi_fdiv
 1037              	.LVL82:
 874:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 875:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 876:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1038              		.loc 1 876 0
 1039              		@ sp needed
 1040 003a 70BD     		pop	{r4, r5, r6, pc}
 1041              	.L80:
 1042              		.align	2
 1043              	.L79:
 1044 003c 00000000 		.word	ADC_SAR_Seq_1_offset
 1045 0040 00002041 		.word	1092616192
 1046 0044 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1047              		.cfi_endproc
 1048              	.LFE17:
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 35


 1049              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1050              		.comm	ADC_SAR_Seq_1_countsPer10Volt,8,4
 1051              		.comm	ADC_SAR_Seq_1_offset,4,4
 1052              		.global	ADC_SAR_Seq_1_initVar
 1053              		.section	.rodata
 1054              		.align	2
 1055              		.set	.LANCHOR0,. + 0
 1056              		.type	ADC_SAR_Seq_1_channelsConfig, %object
 1057              		.size	ADC_SAR_Seq_1_channelsConfig, 8
 1058              	ADC_SAR_Seq_1_channelsConfig:
 1059 0000 00000000 		.space	8
 1059      00000000 
 1060              		.type	ADC_SAR_Seq_1_InputsPlacement.4874, %object
 1061              		.size	ADC_SAR_Seq_1_InputsPlacement.4874, 2
 1062              	ADC_SAR_Seq_1_InputsPlacement.4874:
 1063 0008 02       		.byte	2
 1064 0009 01       		.byte	1
 1065              		.bss
 1066              		.set	.LANCHOR1,. + 0
 1067              		.type	ADC_SAR_Seq_1_initVar, %object
 1068              		.size	ADC_SAR_Seq_1_initVar, 1
 1069              	ADC_SAR_Seq_1_initVar:
 1070 0000 00       		.space	1
 1071              		.text
 1072              	.Letext0:
 1073              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1074              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 1075              		.section	.debug_info,"",%progbits
 1076              	.Ldebug_info0:
 1077 0000 A1050000 		.4byte	0x5a1
 1078 0004 0400     		.2byte	0x4
 1079 0006 00000000 		.4byte	.Ldebug_abbrev0
 1080 000a 04       		.byte	0x4
 1081 000b 01       		.uleb128 0x1
 1082 000c BE000000 		.4byte	.LASF64
 1083 0010 0C       		.byte	0xc
 1084 0011 7C030000 		.4byte	.LASF65
 1085 0015 3E000000 		.4byte	.LASF66
 1086 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1087 001d 00000000 		.4byte	0
 1088 0021 00000000 		.4byte	.Ldebug_line0
 1089 0025 02       		.uleb128 0x2
 1090 0026 01       		.byte	0x1
 1091 0027 06       		.byte	0x6
 1092 0028 D2010000 		.4byte	.LASF0
 1093 002c 02       		.uleb128 0x2
 1094 002d 01       		.byte	0x1
 1095 002e 08       		.byte	0x8
 1096 002f E3030000 		.4byte	.LASF1
 1097 0033 02       		.uleb128 0x2
 1098 0034 02       		.byte	0x2
 1099 0035 05       		.byte	0x5
 1100 0036 F1030000 		.4byte	.LASF2
 1101 003a 02       		.uleb128 0x2
 1102 003b 02       		.byte	0x2
 1103 003c 07       		.byte	0x7
 1104 003d BB020000 		.4byte	.LASF3
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 36


 1105 0041 02       		.uleb128 0x2
 1106 0042 04       		.byte	0x4
 1107 0043 05       		.byte	0x5
 1108 0044 1D020000 		.4byte	.LASF4
 1109 0048 02       		.uleb128 0x2
 1110 0049 04       		.byte	0x4
 1111 004a 07       		.byte	0x7
 1112 004b 99020000 		.4byte	.LASF5
 1113 004f 02       		.uleb128 0x2
 1114 0050 08       		.byte	0x8
 1115 0051 05       		.byte	0x5
 1116 0052 C4010000 		.4byte	.LASF6
 1117 0056 02       		.uleb128 0x2
 1118 0057 08       		.byte	0x8
 1119 0058 07       		.byte	0x7
 1120 0059 60010000 		.4byte	.LASF7
 1121 005d 03       		.uleb128 0x3
 1122 005e 04       		.byte	0x4
 1123 005f 05       		.byte	0x5
 1124 0060 696E7400 		.ascii	"int\000"
 1125 0064 02       		.uleb128 0x2
 1126 0065 04       		.byte	0x4
 1127 0066 07       		.byte	0x7
 1128 0067 85020000 		.4byte	.LASF8
 1129 006b 04       		.uleb128 0x4
 1130 006c 26020000 		.4byte	.LASF9
 1131 0070 02       		.byte	0x2
 1132 0071 E401     		.2byte	0x1e4
 1133 0073 2C000000 		.4byte	0x2c
 1134 0077 04       		.uleb128 0x4
 1135 0078 15000000 		.4byte	.LASF10
 1136 007c 02       		.byte	0x2
 1137 007d E501     		.2byte	0x1e5
 1138 007f 3A000000 		.4byte	0x3a
 1139 0083 04       		.uleb128 0x4
 1140 0084 3D020000 		.4byte	.LASF11
 1141 0088 02       		.byte	0x2
 1142 0089 E601     		.2byte	0x1e6
 1143 008b 48000000 		.4byte	0x48
 1144 008f 04       		.uleb128 0x4
 1145 0090 AA040000 		.4byte	.LASF12
 1146 0094 02       		.byte	0x2
 1147 0095 E801     		.2byte	0x1e8
 1148 0097 33000000 		.4byte	0x33
 1149 009b 04       		.uleb128 0x4
 1150 009c F9010000 		.4byte	.LASF13
 1151 00a0 02       		.byte	0x2
 1152 00a1 E901     		.2byte	0x1e9
 1153 00a3 41000000 		.4byte	0x41
 1154 00a7 04       		.uleb128 0x4
 1155 00a8 07030000 		.4byte	.LASF14
 1156 00ac 02       		.byte	0x2
 1157 00ad EA01     		.2byte	0x1ea
 1158 00af B3000000 		.4byte	0xb3
 1159 00b3 02       		.uleb128 0x2
 1160 00b4 04       		.byte	0x4
 1161 00b5 04       		.byte	0x4
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 37


 1162 00b6 A3030000 		.4byte	.LASF15
 1163 00ba 02       		.uleb128 0x2
 1164 00bb 08       		.byte	0x8
 1165 00bc 04       		.byte	0x4
 1166 00bd 36020000 		.4byte	.LASF16
 1167 00c1 04       		.uleb128 0x4
 1168 00c2 65030000 		.4byte	.LASF17
 1169 00c6 02       		.byte	0x2
 1170 00c7 EF01     		.2byte	0x1ef
 1171 00c9 4F000000 		.4byte	0x4f
 1172 00cd 02       		.uleb128 0x2
 1173 00ce 01       		.byte	0x1
 1174 00cf 08       		.byte	0x8
 1175 00d0 3D040000 		.4byte	.LASF18
 1176 00d4 04       		.uleb128 0x4
 1177 00d5 01030000 		.4byte	.LASF19
 1178 00d9 02       		.byte	0x2
 1179 00da 9002     		.2byte	0x290
 1180 00dc E0000000 		.4byte	0xe0
 1181 00e0 05       		.uleb128 0x5
 1182 00e1 83000000 		.4byte	0x83
 1183 00e5 02       		.uleb128 0x2
 1184 00e6 08       		.byte	0x8
 1185 00e7 04       		.byte	0x4
 1186 00e8 21030000 		.4byte	.LASF20
 1187 00ec 02       		.uleb128 0x2
 1188 00ed 04       		.byte	0x4
 1189 00ee 07       		.byte	0x7
 1190 00ef 0F030000 		.4byte	.LASF21
 1191 00f3 06       		.uleb128 0x6
 1192 00f4 1C000000 		.4byte	.LASF26
 1193 00f8 01       		.byte	0x1
 1194 00f9 5E       		.byte	0x5e
 1195 00fa 00000000 		.4byte	.LFB1
 1196 00fe 88010000 		.4byte	.LFE1-.LFB1
 1197 0102 01       		.uleb128 0x1
 1198 0103 9C       		.byte	0x9c
 1199 0104 6E010000 		.4byte	0x16e
 1200 0108 07       		.uleb128 0x7
 1201 0109 32040000 		.4byte	.LASF22
 1202 010d 01       		.byte	0x1
 1203 010e 60       		.byte	0x60
 1204 010f 83000000 		.4byte	0x83
 1205 0113 00000000 		.4byte	.LLST0
 1206 0117 07       		.uleb128 0x7
 1207 0118 B1020000 		.4byte	.LASF23
 1208 011c 01       		.byte	0x1
 1209 011d 61       		.byte	0x61
 1210 011e 83000000 		.4byte	0x83
 1211 0122 1F000000 		.4byte	.LLST1
 1212 0126 07       		.uleb128 0x7
 1213 0127 37000000 		.4byte	.LASF24
 1214 012b 01       		.byte	0x1
 1215 012c 62       		.byte	0x62
 1216 012d 9B000000 		.4byte	0x9b
 1217 0131 78010000 		.4byte	.LLST2
 1218 0135 08       		.uleb128 0x8
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 38


 1219 0136 8C010000 		.4byte	.LASF25
 1220 013a 01       		.byte	0x1
 1221 013b 65       		.byte	0x65
 1222 013c 83010000 		.4byte	0x183
 1223 0140 05       		.uleb128 0x5
 1224 0141 03       		.byte	0x3
 1225 0142 08000000 		.4byte	ADC_SAR_Seq_1_InputsPlacement.4874
 1226 0146 09       		.uleb128 0x9
 1227 0147 0A000000 		.4byte	.LVL0
 1228 014b 78050000 		.4byte	0x578
 1229 014f 5E010000 		.4byte	0x15e
 1230 0153 0A       		.uleb128 0xa
 1231 0154 01       		.uleb128 0x1
 1232 0155 50       		.byte	0x50
 1233 0156 01       		.uleb128 0x1
 1234 0157 3E       		.byte	0x3e
 1235 0158 0A       		.uleb128 0xa
 1236 0159 01       		.uleb128 0x1
 1237 015a 51       		.byte	0x51
 1238 015b 01       		.uleb128 0x1
 1239 015c 33       		.byte	0x33
 1240 015d 00       		.byte	0
 1241 015e 0B       		.uleb128 0xb
 1242 015f 12000000 		.4byte	.LVL1
 1243 0163 83050000 		.4byte	0x583
 1244 0167 0A       		.uleb128 0xa
 1245 0168 01       		.uleb128 0x1
 1246 0169 50       		.byte	0x50
 1247 016a 01       		.uleb128 0x1
 1248 016b 3E       		.byte	0x3e
 1249 016c 00       		.byte	0
 1250 016d 00       		.byte	0
 1251 016e 0C       		.uleb128 0xc
 1252 016f 7E010000 		.4byte	0x17e
 1253 0173 7E010000 		.4byte	0x17e
 1254 0177 0D       		.uleb128 0xd
 1255 0178 EC000000 		.4byte	0xec
 1256 017c 01       		.byte	0x1
 1257 017d 00       		.byte	0
 1258 017e 0E       		.uleb128 0xe
 1259 017f 6B000000 		.4byte	0x6b
 1260 0183 0E       		.uleb128 0xe
 1261 0184 6E010000 		.4byte	0x16e
 1262 0188 0F       		.uleb128 0xf
 1263 0189 77010000 		.4byte	.LASF27
 1264 018d 01       		.byte	0x1
 1265 018e 4A01     		.2byte	0x14a
 1266 0190 00000000 		.4byte	.LFB2
 1267 0194 24000000 		.4byte	.LFE2-.LFB2
 1268 0198 01       		.uleb128 0x1
 1269 0199 9C       		.byte	0x9c
 1270 019a AE010000 		.4byte	0x1ae
 1271 019e 0B       		.uleb128 0xb
 1272 019f 1C000000 		.4byte	.LVL22
 1273 01a3 8E050000 		.4byte	0x58e
 1274 01a7 0A       		.uleb128 0xa
 1275 01a8 01       		.uleb128 0x1
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 39


 1276 01a9 50       		.byte	0x50
 1277 01aa 01       		.uleb128 0x1
 1278 01ab 3A       		.byte	0x3a
 1279 01ac 00       		.byte	0
 1280 01ad 00       		.byte	0
 1281 01ae 06       		.uleb128 0x6
 1282 01af 4C010000 		.4byte	.LASF28
 1283 01b3 01       		.byte	0x1
 1284 01b4 3F       		.byte	0x3f
 1285 01b5 00000000 		.4byte	.LFB0
 1286 01b9 20000000 		.4byte	.LFE0-.LFB0
 1287 01bd 01       		.uleb128 0x1
 1288 01be 9C       		.byte	0x9c
 1289 01bf D6010000 		.4byte	0x1d6
 1290 01c3 10       		.uleb128 0x10
 1291 01c4 0E000000 		.4byte	.LVL23
 1292 01c8 F3000000 		.4byte	0xf3
 1293 01cc 10       		.uleb128 0x10
 1294 01cd 18000000 		.4byte	.LVL24
 1295 01d1 88010000 		.4byte	0x188
 1296 01d5 00       		.byte	0
 1297 01d6 11       		.uleb128 0x11
 1298 01d7 BF030000 		.4byte	.LASF29
 1299 01db 01       		.byte	0x1
 1300 01dc 6D01     		.2byte	0x16d
 1301 01de 00000000 		.4byte	.LFB3
 1302 01e2 10000000 		.4byte	.LFE3-.LFB3
 1303 01e6 01       		.uleb128 0x1
 1304 01e7 9C       		.byte	0x9c
 1305 01e8 11       		.uleb128 0x11
 1306 01e9 8A000000 		.4byte	.LASF30
 1307 01ed 01       		.byte	0x1
 1308 01ee 8701     		.2byte	0x187
 1309 01f0 00000000 		.4byte	.LFB4
 1310 01f4 14000000 		.4byte	.LFE4-.LFB4
 1311 01f8 01       		.uleb128 0x1
 1312 01f9 9C       		.byte	0x9c
 1313 01fa 11       		.uleb128 0x11
 1314 01fb 4B030000 		.4byte	.LASF31
 1315 01ff 01       		.byte	0x1
 1316 0200 A001     		.2byte	0x1a0
 1317 0202 00000000 		.4byte	.LFB5
 1318 0206 14000000 		.4byte	.LFE5-.LFB5
 1319 020a 01       		.uleb128 0x1
 1320 020b 9C       		.byte	0x9c
 1321 020c 12       		.uleb128 0x12
 1322 020d 2D030000 		.4byte	.LASF33
 1323 0211 01       		.byte	0x1
 1324 0212 C201     		.2byte	0x1c2
 1325 0214 83000000 		.4byte	0x83
 1326 0218 00000000 		.4byte	.LFB6
 1327 021c 28000000 		.4byte	.LFE6-.LFB6
 1328 0220 01       		.uleb128 0x1
 1329 0221 9C       		.byte	0x9c
 1330 0222 47020000 		.4byte	0x247
 1331 0226 13       		.uleb128 0x13
 1332 0227 67020000 		.4byte	.LASF35
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 40


 1333 022b 01       		.byte	0x1
 1334 022c C201     		.2byte	0x1c2
 1335 022e 83000000 		.4byte	0x83
 1336 0232 8B010000 		.4byte	.LLST3
 1337 0236 14       		.uleb128 0x14
 1338 0237 8B040000 		.4byte	.LASF32
 1339 023b 01       		.byte	0x1
 1340 023c C401     		.2byte	0x1c4
 1341 023e 83000000 		.4byte	0x83
 1342 0242 D0010000 		.4byte	.LLST4
 1343 0246 00       		.byte	0
 1344 0247 12       		.uleb128 0x12
 1345 0248 AA010000 		.4byte	.LASF34
 1346 024c 01       		.byte	0x1
 1347 024d F801     		.2byte	0x1f8
 1348 024f 8F000000 		.4byte	0x8f
 1349 0253 00000000 		.4byte	.LFB7
 1350 0257 2C000000 		.4byte	.LFE7-.LFB7
 1351 025b 01       		.uleb128 0x1
 1352 025c 9C       		.byte	0x9c
 1353 025d 91020000 		.4byte	0x291
 1354 0261 13       		.uleb128 0x13
 1355 0262 38040000 		.4byte	.LASF36
 1356 0266 01       		.byte	0x1
 1357 0267 F801     		.2byte	0x1f8
 1358 0269 83000000 		.4byte	0x83
 1359 026d 06020000 		.4byte	.LLST5
 1360 0271 14       		.uleb128 0x14
 1361 0272 CB040000 		.4byte	.LASF37
 1362 0276 01       		.byte	0x1
 1363 0277 FA01     		.2byte	0x1fa
 1364 0279 83000000 		.4byte	0x83
 1365 027d 4B020000 		.4byte	.LLST6
 1366 0281 0B       		.uleb128 0xb
 1367 0282 0E000000 		.4byte	.LVL34
 1368 0286 99050000 		.4byte	0x599
 1369 028a 0A       		.uleb128 0xa
 1370 028b 01       		.uleb128 0x1
 1371 028c 50       		.byte	0x50
 1372 028d 01       		.uleb128 0x1
 1373 028e 30       		.byte	0x30
 1374 028f 00       		.byte	0
 1375 0290 00       		.byte	0
 1376 0291 0F       		.uleb128 0xf
 1377 0292 18040000 		.4byte	.LASF38
 1378 0296 01       		.byte	0x1
 1379 0297 2502     		.2byte	0x225
 1380 0299 00000000 		.4byte	.LFB8
 1381 029d 10000000 		.4byte	.LFE8-.LFB8
 1382 02a1 01       		.uleb128 0x1
 1383 02a2 9C       		.byte	0x9c
 1384 02a3 B8020000 		.4byte	0x2b8
 1385 02a7 13       		.uleb128 0x13
 1386 02a8 44020000 		.4byte	.LASF39
 1387 02ac 01       		.byte	0x1
 1388 02ad 2502     		.2byte	0x225
 1389 02af 83000000 		.4byte	0x83
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 41


 1390 02b3 69020000 		.4byte	.LLST7
 1391 02b7 00       		.byte	0
 1392 02b8 0F       		.uleb128 0xf
 1393 02b9 42040000 		.4byte	.LASF40
 1394 02bd 01       		.byte	0x1
 1395 02be 5102     		.2byte	0x251
 1396 02c0 00000000 		.4byte	.LFB9
 1397 02c4 1C000000 		.4byte	.LFE9-.LFB9
 1398 02c8 01       		.uleb128 0x1
 1399 02c9 9C       		.byte	0x9c
 1400 02ca DF020000 		.4byte	0x2df
 1401 02ce 13       		.uleb128 0x13
 1402 02cf 18030000 		.4byte	.LASF41
 1403 02d3 01       		.byte	0x1
 1404 02d4 5102     		.2byte	0x251
 1405 02d6 83000000 		.4byte	0x83
 1406 02da 8A020000 		.4byte	.LLST8
 1407 02de 00       		.byte	0
 1408 02df 0F       		.uleb128 0xf
 1409 02e0 DE010000 		.4byte	.LASF42
 1410 02e4 01       		.byte	0x1
 1411 02e5 6602     		.2byte	0x266
 1412 02e7 00000000 		.4byte	.LFB10
 1413 02eb 18000000 		.4byte	.LFE10-.LFB10
 1414 02ef 01       		.uleb128 0x1
 1415 02f0 9C       		.byte	0x9c
 1416 02f1 06030000 		.4byte	0x306
 1417 02f5 13       		.uleb128 0x13
 1418 02f6 D2030000 		.4byte	.LASF43
 1419 02fa 01       		.byte	0x1
 1420 02fb 6602     		.2byte	0x266
 1421 02fd 83000000 		.4byte	0x83
 1422 0301 AB020000 		.4byte	.LLST9
 1423 0305 00       		.byte	0
 1424 0306 0F       		.uleb128 0xf
 1425 0307 B0040000 		.4byte	.LASF44
 1426 030b 01       		.byte	0x1
 1427 030c 7E02     		.2byte	0x27e
 1428 030e 00000000 		.4byte	.LFB11
 1429 0312 10000000 		.4byte	.LFE11-.LFB11
 1430 0316 01       		.uleb128 0x1
 1431 0317 9C       		.byte	0x9c
 1432 0318 2D030000 		.4byte	0x32d
 1433 031c 13       		.uleb128 0x13
 1434 031d 44020000 		.4byte	.LASF39
 1435 0321 01       		.byte	0x1
 1436 0322 7E02     		.2byte	0x27e
 1437 0324 83000000 		.4byte	0x83
 1438 0328 CC020000 		.4byte	.LLST10
 1439 032c 00       		.byte	0
 1440 032d 0F       		.uleb128 0xf
 1441 032e A5000000 		.4byte	.LASF45
 1442 0332 01       		.byte	0x1
 1443 0333 9502     		.2byte	0x295
 1444 0335 00000000 		.4byte	.LFB12
 1445 0339 10000000 		.4byte	.LFE12-.LFB12
 1446 033d 01       		.uleb128 0x1
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 42


 1447 033e 9C       		.byte	0x9c
 1448 033f 54030000 		.4byte	0x354
 1449 0343 13       		.uleb128 0x13
 1450 0344 44020000 		.4byte	.LASF39
 1451 0348 01       		.byte	0x1
 1452 0349 9502     		.2byte	0x295
 1453 034b 83000000 		.4byte	0x83
 1454 034f ED020000 		.4byte	.LLST11
 1455 0353 00       		.byte	0
 1456 0354 0F       		.uleb128 0xf
 1457 0355 92040000 		.4byte	.LASF46
 1458 0359 01       		.byte	0x1
 1459 035a B102     		.2byte	0x2b1
 1460 035c 00000000 		.4byte	.LFB13
 1461 0360 1C000000 		.4byte	.LFE13-.LFB13
 1462 0364 01       		.uleb128 0x1
 1463 0365 9C       		.byte	0x9c
 1464 0366 9A030000 		.4byte	0x39a
 1465 036a 13       		.uleb128 0x13
 1466 036b 38040000 		.4byte	.LASF36
 1467 036f 01       		.byte	0x1
 1468 0370 B102     		.2byte	0x2b1
 1469 0372 83000000 		.4byte	0x83
 1470 0376 0E030000 		.4byte	.LLST12
 1471 037a 13       		.uleb128 0x13
 1472 037b 5C040000 		.4byte	.LASF47
 1473 037f 01       		.byte	0x1
 1474 0380 B102     		.2byte	0x2b1
 1475 0382 8F000000 		.4byte	0x8f
 1476 0386 3A030000 		.4byte	.LLST13
 1477 038a 0B       		.uleb128 0xb
 1478 038b 10000000 		.4byte	.LVL52
 1479 038f 99050000 		.4byte	0x599
 1480 0393 0A       		.uleb128 0xa
 1481 0394 01       		.uleb128 0x1
 1482 0395 50       		.byte	0x50
 1483 0396 01       		.uleb128 0x1
 1484 0397 30       		.byte	0x30
 1485 0398 00       		.byte	0
 1486 0399 00       		.byte	0
 1487 039a 0F       		.uleb128 0xf
 1488 039b A9030000 		.4byte	.LASF48
 1489 039f 01       		.byte	0x1
 1490 03a0 D302     		.2byte	0x2d3
 1491 03a2 00000000 		.4byte	.LFB14
 1492 03a6 1C000000 		.4byte	.LFE14-.LFB14
 1493 03aa 01       		.uleb128 0x1
 1494 03ab 9C       		.byte	0x9c
 1495 03ac E0030000 		.4byte	0x3e0
 1496 03b0 13       		.uleb128 0x13
 1497 03b1 38040000 		.4byte	.LASF36
 1498 03b5 01       		.byte	0x1
 1499 03b6 D302     		.2byte	0x2d3
 1500 03b8 83000000 		.4byte	0x83
 1501 03bc 5B030000 		.4byte	.LLST14
 1502 03c0 13       		.uleb128 0x13
 1503 03c1 2F000000 		.4byte	.LASF49
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 43


 1504 03c5 01       		.byte	0x1
 1505 03c6 D302     		.2byte	0x2d3
 1506 03c8 9B000000 		.4byte	0x9b
 1507 03cc 87030000 		.4byte	.LLST15
 1508 03d0 0B       		.uleb128 0xb
 1509 03d1 10000000 		.4byte	.LVL56
 1510 03d5 99050000 		.4byte	0x599
 1511 03d9 0A       		.uleb128 0xa
 1512 03da 01       		.uleb128 0x1
 1513 03db 50       		.byte	0x50
 1514 03dc 01       		.uleb128 0x1
 1515 03dd 30       		.byte	0x30
 1516 03de 00       		.byte	0
 1517 03df 00       		.byte	0
 1518 03e0 15       		.uleb128 0x15
 1519 03e1 49020000 		.4byte	.LASF50
 1520 03e5 01       		.byte	0x1
 1521 03e6 F402     		.2byte	0x2f4
 1522 03e8 8F000000 		.4byte	0x8f
 1523 03ec 00000000 		.4byte	.LFB15
 1524 03f0 5C000000 		.4byte	.LFE15-.LFB15
 1525 03f4 01       		.uleb128 0x1
 1526 03f5 9C       		.byte	0x9c
 1527 03f6 38040000 		.4byte	0x438
 1528 03fa 13       		.uleb128 0x13
 1529 03fb 38040000 		.4byte	.LASF36
 1530 03ff 01       		.byte	0x1
 1531 0400 F402     		.2byte	0x2f4
 1532 0402 83000000 		.4byte	0x83
 1533 0406 B7030000 		.4byte	.LLST16
 1534 040a 13       		.uleb128 0x13
 1535 040b 63040000 		.4byte	.LASF51
 1536 040f 01       		.byte	0x1
 1537 0410 F402     		.2byte	0x2f4
 1538 0412 8F000000 		.4byte	0x8f
 1539 0416 E3030000 		.4byte	.LLST17
 1540 041a 16       		.uleb128 0x16
 1541 041b FA020000 		.4byte	.LASF52
 1542 041f 01       		.byte	0x1
 1543 0420 F602     		.2byte	0x2f6
 1544 0422 8F000000 		.4byte	0x8f
 1545 0426 01       		.uleb128 0x1
 1546 0427 50       		.byte	0x50
 1547 0428 0B       		.uleb128 0xb
 1548 0429 10000000 		.4byte	.LVL61
 1549 042d 99050000 		.4byte	0x599
 1550 0431 0A       		.uleb128 0xa
 1551 0432 01       		.uleb128 0x1
 1552 0433 50       		.byte	0x50
 1553 0434 01       		.uleb128 0x1
 1554 0435 30       		.byte	0x30
 1555 0436 00       		.byte	0
 1556 0437 00       		.byte	0
 1557 0438 15       		.uleb128 0x15
 1558 0439 FF010000 		.4byte	.LASF53
 1559 043d 01       		.byte	0x1
 1560 043e 2A03     		.2byte	0x32a
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 44


 1561 0440 9B000000 		.4byte	0x9b
 1562 0444 00000000 		.4byte	.LFB16
 1563 0448 40000000 		.4byte	.LFE16-.LFB16
 1564 044c 01       		.uleb128 0x1
 1565 044d 9C       		.byte	0x9c
 1566 044e 8E040000 		.4byte	0x48e
 1567 0452 13       		.uleb128 0x13
 1568 0453 38040000 		.4byte	.LASF36
 1569 0457 01       		.byte	0x1
 1570 0458 2A03     		.2byte	0x32a
 1571 045a 83000000 		.4byte	0x83
 1572 045e 0F040000 		.4byte	.LLST18
 1573 0462 13       		.uleb128 0x13
 1574 0463 63040000 		.4byte	.LASF51
 1575 0467 01       		.byte	0x1
 1576 0468 2A03     		.2byte	0x32a
 1577 046a 8F000000 		.4byte	0x8f
 1578 046e 3B040000 		.4byte	.LLST19
 1579 0472 17       		.uleb128 0x17
 1580 0473 92020000 		.4byte	.LASF67
 1581 0477 01       		.byte	0x1
 1582 0478 2C03     		.2byte	0x32c
 1583 047a C1000000 		.4byte	0xc1
 1584 047e 0B       		.uleb128 0xb
 1585 047f 10000000 		.4byte	.LVL69
 1586 0483 99050000 		.4byte	0x599
 1587 0487 0A       		.uleb128 0xa
 1588 0488 01       		.uleb128 0x1
 1589 0489 50       		.byte	0x50
 1590 048a 01       		.uleb128 0x1
 1591 048b 30       		.byte	0x30
 1592 048c 00       		.byte	0
 1593 048d 00       		.byte	0
 1594 048e 15       		.uleb128 0x15
 1595 048f FB030000 		.4byte	.LASF54
 1596 0493 01       		.byte	0x1
 1597 0494 5703     		.2byte	0x357
 1598 0496 A7000000 		.4byte	0xa7
 1599 049a 00000000 		.4byte	.LFB17
 1600 049e 48000000 		.4byte	.LFE17-.LFB17
 1601 04a2 01       		.uleb128 0x1
 1602 04a3 9C       		.byte	0x9c
 1603 04a4 E6040000 		.4byte	0x4e6
 1604 04a8 13       		.uleb128 0x13
 1605 04a9 38040000 		.4byte	.LASF36
 1606 04ad 01       		.byte	0x1
 1607 04ae 5703     		.2byte	0x357
 1608 04b0 83000000 		.4byte	0x83
 1609 04b4 67040000 		.4byte	.LLST20
 1610 04b8 13       		.uleb128 0x13
 1611 04b9 63040000 		.4byte	.LASF51
 1612 04bd 01       		.byte	0x1
 1613 04be 5703     		.2byte	0x357
 1614 04c0 8F000000 		.4byte	0x8f
 1615 04c4 93040000 		.4byte	.LLST21
 1616 04c8 16       		.uleb128 0x16
 1617 04c9 AB020000 		.4byte	.LASF55
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 45


 1618 04cd 01       		.byte	0x1
 1619 04ce 5903     		.2byte	0x359
 1620 04d0 A7000000 		.4byte	0xa7
 1621 04d4 01       		.uleb128 0x1
 1622 04d5 50       		.byte	0x50
 1623 04d6 0B       		.uleb128 0xb
 1624 04d7 10000000 		.4byte	.LVL76
 1625 04db 99050000 		.4byte	0x599
 1626 04df 0A       		.uleb128 0xa
 1627 04e0 01       		.uleb128 0x1
 1628 04e1 50       		.byte	0x50
 1629 04e2 01       		.uleb128 0x1
 1630 04e3 30       		.byte	0x30
 1631 04e4 00       		.byte	0
 1632 04e5 00       		.byte	0
 1633 04e6 0C       		.uleb128 0xc
 1634 04e7 F6040000 		.4byte	0x4f6
 1635 04eb F6040000 		.4byte	0x4f6
 1636 04ef 0D       		.uleb128 0xd
 1637 04f0 EC000000 		.4byte	0xec
 1638 04f4 01       		.byte	0x1
 1639 04f5 00       		.byte	0
 1640 04f6 0E       		.uleb128 0xe
 1641 04f7 83000000 		.4byte	0x83
 1642 04fb 08       		.uleb128 0x8
 1643 04fc DD020000 		.4byte	.LASF56
 1644 0500 01       		.byte	0x1
 1645 0501 21       		.byte	0x21
 1646 0502 0C050000 		.4byte	0x50c
 1647 0506 05       		.uleb128 0x5
 1648 0507 03       		.byte	0x3
 1649 0508 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1650 050c 0E       		.uleb128 0xe
 1651 050d E6040000 		.4byte	0x4e6
 1652 0511 18       		.uleb128 0x18
 1653 0512 6F020000 		.4byte	.LASF57
 1654 0516 01       		.byte	0x1
 1655 0517 18       		.byte	0x18
 1656 0518 6B000000 		.4byte	0x6b
 1657 051c 05       		.uleb128 0x5
 1658 051d 03       		.byte	0x3
 1659 051e 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1660 0522 0C       		.uleb128 0xc
 1661 0523 32050000 		.4byte	0x532
 1662 0527 32050000 		.4byte	0x532
 1663 052b 0D       		.uleb128 0xd
 1664 052c EC000000 		.4byte	0xec
 1665 0530 01       		.byte	0x1
 1666 0531 00       		.byte	0
 1667 0532 05       		.uleb128 0x5
 1668 0533 8F000000 		.4byte	0x8f
 1669 0537 18       		.uleb128 0x18
 1670 0538 00000000 		.4byte	.LASF58
 1671 053c 01       		.byte	0x1
 1672 053d 19       		.byte	0x19
 1673 053e 48050000 		.4byte	0x548
 1674 0542 05       		.uleb128 0x5
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 46


 1675 0543 03       		.byte	0x3
 1676 0544 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1677 0548 05       		.uleb128 0x5
 1678 0549 22050000 		.4byte	0x522
 1679 054d 0C       		.uleb128 0xc
 1680 054e 5D050000 		.4byte	0x55d
 1681 0552 5D050000 		.4byte	0x55d
 1682 0556 0D       		.uleb128 0xd
 1683 0557 EC000000 		.4byte	0xec
 1684 055b 01       		.byte	0x1
 1685 055c 00       		.byte	0
 1686 055d 05       		.uleb128 0x5
 1687 055e 9B000000 		.4byte	0x9b
 1688 0562 18       		.uleb128 0x18
 1689 0563 6D040000 		.4byte	.LASF59
 1690 0567 01       		.byte	0x1
 1691 0568 1A       		.byte	0x1a
 1692 0569 73050000 		.4byte	0x573
 1693 056d 05       		.uleb128 0x5
 1694 056e 03       		.byte	0x3
 1695 056f 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1696 0573 05       		.uleb128 0x5
 1697 0574 4D050000 		.4byte	0x54d
 1698 0578 19       		.uleb128 0x19
 1699 0579 6B030000 		.4byte	.LASF60
 1700 057d 6B030000 		.4byte	.LASF60
 1701 0581 03       		.byte	0x3
 1702 0582 C0       		.byte	0xc0
 1703 0583 19       		.uleb128 0x19
 1704 0584 CE020000 		.4byte	.LASF61
 1705 0588 CE020000 		.4byte	.LASF61
 1706 058c 03       		.byte	0x3
 1707 058d BD       		.byte	0xbd
 1708 058e 19       		.uleb128 0x19
 1709 058f 2C020000 		.4byte	.LASF62
 1710 0593 2C020000 		.4byte	.LASF62
 1711 0597 03       		.byte	0x3
 1712 0598 DA       		.byte	0xda
 1713 0599 19       		.uleb128 0x19
 1714 059a DC030000 		.4byte	.LASF63
 1715 059e DC030000 		.4byte	.LASF63
 1716 05a2 03       		.byte	0x3
 1717 05a3 E7       		.byte	0xe7
 1718 05a4 00       		.byte	0
 1719              		.section	.debug_abbrev,"",%progbits
 1720              	.Ldebug_abbrev0:
 1721 0000 01       		.uleb128 0x1
 1722 0001 11       		.uleb128 0x11
 1723 0002 01       		.byte	0x1
 1724 0003 25       		.uleb128 0x25
 1725 0004 0E       		.uleb128 0xe
 1726 0005 13       		.uleb128 0x13
 1727 0006 0B       		.uleb128 0xb
 1728 0007 03       		.uleb128 0x3
 1729 0008 0E       		.uleb128 0xe
 1730 0009 1B       		.uleb128 0x1b
 1731 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 47


 1732 000b 55       		.uleb128 0x55
 1733 000c 17       		.uleb128 0x17
 1734 000d 11       		.uleb128 0x11
 1735 000e 01       		.uleb128 0x1
 1736 000f 10       		.uleb128 0x10
 1737 0010 17       		.uleb128 0x17
 1738 0011 00       		.byte	0
 1739 0012 00       		.byte	0
 1740 0013 02       		.uleb128 0x2
 1741 0014 24       		.uleb128 0x24
 1742 0015 00       		.byte	0
 1743 0016 0B       		.uleb128 0xb
 1744 0017 0B       		.uleb128 0xb
 1745 0018 3E       		.uleb128 0x3e
 1746 0019 0B       		.uleb128 0xb
 1747 001a 03       		.uleb128 0x3
 1748 001b 0E       		.uleb128 0xe
 1749 001c 00       		.byte	0
 1750 001d 00       		.byte	0
 1751 001e 03       		.uleb128 0x3
 1752 001f 24       		.uleb128 0x24
 1753 0020 00       		.byte	0
 1754 0021 0B       		.uleb128 0xb
 1755 0022 0B       		.uleb128 0xb
 1756 0023 3E       		.uleb128 0x3e
 1757 0024 0B       		.uleb128 0xb
 1758 0025 03       		.uleb128 0x3
 1759 0026 08       		.uleb128 0x8
 1760 0027 00       		.byte	0
 1761 0028 00       		.byte	0
 1762 0029 04       		.uleb128 0x4
 1763 002a 16       		.uleb128 0x16
 1764 002b 00       		.byte	0
 1765 002c 03       		.uleb128 0x3
 1766 002d 0E       		.uleb128 0xe
 1767 002e 3A       		.uleb128 0x3a
 1768 002f 0B       		.uleb128 0xb
 1769 0030 3B       		.uleb128 0x3b
 1770 0031 05       		.uleb128 0x5
 1771 0032 49       		.uleb128 0x49
 1772 0033 13       		.uleb128 0x13
 1773 0034 00       		.byte	0
 1774 0035 00       		.byte	0
 1775 0036 05       		.uleb128 0x5
 1776 0037 35       		.uleb128 0x35
 1777 0038 00       		.byte	0
 1778 0039 49       		.uleb128 0x49
 1779 003a 13       		.uleb128 0x13
 1780 003b 00       		.byte	0
 1781 003c 00       		.byte	0
 1782 003d 06       		.uleb128 0x6
 1783 003e 2E       		.uleb128 0x2e
 1784 003f 01       		.byte	0x1
 1785 0040 3F       		.uleb128 0x3f
 1786 0041 19       		.uleb128 0x19
 1787 0042 03       		.uleb128 0x3
 1788 0043 0E       		.uleb128 0xe
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 48


 1789 0044 3A       		.uleb128 0x3a
 1790 0045 0B       		.uleb128 0xb
 1791 0046 3B       		.uleb128 0x3b
 1792 0047 0B       		.uleb128 0xb
 1793 0048 27       		.uleb128 0x27
 1794 0049 19       		.uleb128 0x19
 1795 004a 11       		.uleb128 0x11
 1796 004b 01       		.uleb128 0x1
 1797 004c 12       		.uleb128 0x12
 1798 004d 06       		.uleb128 0x6
 1799 004e 40       		.uleb128 0x40
 1800 004f 18       		.uleb128 0x18
 1801 0050 9742     		.uleb128 0x2117
 1802 0052 19       		.uleb128 0x19
 1803 0053 01       		.uleb128 0x1
 1804 0054 13       		.uleb128 0x13
 1805 0055 00       		.byte	0
 1806 0056 00       		.byte	0
 1807 0057 07       		.uleb128 0x7
 1808 0058 34       		.uleb128 0x34
 1809 0059 00       		.byte	0
 1810 005a 03       		.uleb128 0x3
 1811 005b 0E       		.uleb128 0xe
 1812 005c 3A       		.uleb128 0x3a
 1813 005d 0B       		.uleb128 0xb
 1814 005e 3B       		.uleb128 0x3b
 1815 005f 0B       		.uleb128 0xb
 1816 0060 49       		.uleb128 0x49
 1817 0061 13       		.uleb128 0x13
 1818 0062 02       		.uleb128 0x2
 1819 0063 17       		.uleb128 0x17
 1820 0064 00       		.byte	0
 1821 0065 00       		.byte	0
 1822 0066 08       		.uleb128 0x8
 1823 0067 34       		.uleb128 0x34
 1824 0068 00       		.byte	0
 1825 0069 03       		.uleb128 0x3
 1826 006a 0E       		.uleb128 0xe
 1827 006b 3A       		.uleb128 0x3a
 1828 006c 0B       		.uleb128 0xb
 1829 006d 3B       		.uleb128 0x3b
 1830 006e 0B       		.uleb128 0xb
 1831 006f 49       		.uleb128 0x49
 1832 0070 13       		.uleb128 0x13
 1833 0071 02       		.uleb128 0x2
 1834 0072 18       		.uleb128 0x18
 1835 0073 00       		.byte	0
 1836 0074 00       		.byte	0
 1837 0075 09       		.uleb128 0x9
 1838 0076 898201   		.uleb128 0x4109
 1839 0079 01       		.byte	0x1
 1840 007a 11       		.uleb128 0x11
 1841 007b 01       		.uleb128 0x1
 1842 007c 31       		.uleb128 0x31
 1843 007d 13       		.uleb128 0x13
 1844 007e 01       		.uleb128 0x1
 1845 007f 13       		.uleb128 0x13
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 49


 1846 0080 00       		.byte	0
 1847 0081 00       		.byte	0
 1848 0082 0A       		.uleb128 0xa
 1849 0083 8A8201   		.uleb128 0x410a
 1850 0086 00       		.byte	0
 1851 0087 02       		.uleb128 0x2
 1852 0088 18       		.uleb128 0x18
 1853 0089 9142     		.uleb128 0x2111
 1854 008b 18       		.uleb128 0x18
 1855 008c 00       		.byte	0
 1856 008d 00       		.byte	0
 1857 008e 0B       		.uleb128 0xb
 1858 008f 898201   		.uleb128 0x4109
 1859 0092 01       		.byte	0x1
 1860 0093 11       		.uleb128 0x11
 1861 0094 01       		.uleb128 0x1
 1862 0095 31       		.uleb128 0x31
 1863 0096 13       		.uleb128 0x13
 1864 0097 00       		.byte	0
 1865 0098 00       		.byte	0
 1866 0099 0C       		.uleb128 0xc
 1867 009a 01       		.uleb128 0x1
 1868 009b 01       		.byte	0x1
 1869 009c 49       		.uleb128 0x49
 1870 009d 13       		.uleb128 0x13
 1871 009e 01       		.uleb128 0x1
 1872 009f 13       		.uleb128 0x13
 1873 00a0 00       		.byte	0
 1874 00a1 00       		.byte	0
 1875 00a2 0D       		.uleb128 0xd
 1876 00a3 21       		.uleb128 0x21
 1877 00a4 00       		.byte	0
 1878 00a5 49       		.uleb128 0x49
 1879 00a6 13       		.uleb128 0x13
 1880 00a7 2F       		.uleb128 0x2f
 1881 00a8 0B       		.uleb128 0xb
 1882 00a9 00       		.byte	0
 1883 00aa 00       		.byte	0
 1884 00ab 0E       		.uleb128 0xe
 1885 00ac 26       		.uleb128 0x26
 1886 00ad 00       		.byte	0
 1887 00ae 49       		.uleb128 0x49
 1888 00af 13       		.uleb128 0x13
 1889 00b0 00       		.byte	0
 1890 00b1 00       		.byte	0
 1891 00b2 0F       		.uleb128 0xf
 1892 00b3 2E       		.uleb128 0x2e
 1893 00b4 01       		.byte	0x1
 1894 00b5 3F       		.uleb128 0x3f
 1895 00b6 19       		.uleb128 0x19
 1896 00b7 03       		.uleb128 0x3
 1897 00b8 0E       		.uleb128 0xe
 1898 00b9 3A       		.uleb128 0x3a
 1899 00ba 0B       		.uleb128 0xb
 1900 00bb 3B       		.uleb128 0x3b
 1901 00bc 05       		.uleb128 0x5
 1902 00bd 27       		.uleb128 0x27
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 50


 1903 00be 19       		.uleb128 0x19
 1904 00bf 11       		.uleb128 0x11
 1905 00c0 01       		.uleb128 0x1
 1906 00c1 12       		.uleb128 0x12
 1907 00c2 06       		.uleb128 0x6
 1908 00c3 40       		.uleb128 0x40
 1909 00c4 18       		.uleb128 0x18
 1910 00c5 9742     		.uleb128 0x2117
 1911 00c7 19       		.uleb128 0x19
 1912 00c8 01       		.uleb128 0x1
 1913 00c9 13       		.uleb128 0x13
 1914 00ca 00       		.byte	0
 1915 00cb 00       		.byte	0
 1916 00cc 10       		.uleb128 0x10
 1917 00cd 898201   		.uleb128 0x4109
 1918 00d0 00       		.byte	0
 1919 00d1 11       		.uleb128 0x11
 1920 00d2 01       		.uleb128 0x1
 1921 00d3 31       		.uleb128 0x31
 1922 00d4 13       		.uleb128 0x13
 1923 00d5 00       		.byte	0
 1924 00d6 00       		.byte	0
 1925 00d7 11       		.uleb128 0x11
 1926 00d8 2E       		.uleb128 0x2e
 1927 00d9 00       		.byte	0
 1928 00da 3F       		.uleb128 0x3f
 1929 00db 19       		.uleb128 0x19
 1930 00dc 03       		.uleb128 0x3
 1931 00dd 0E       		.uleb128 0xe
 1932 00de 3A       		.uleb128 0x3a
 1933 00df 0B       		.uleb128 0xb
 1934 00e0 3B       		.uleb128 0x3b
 1935 00e1 05       		.uleb128 0x5
 1936 00e2 27       		.uleb128 0x27
 1937 00e3 19       		.uleb128 0x19
 1938 00e4 11       		.uleb128 0x11
 1939 00e5 01       		.uleb128 0x1
 1940 00e6 12       		.uleb128 0x12
 1941 00e7 06       		.uleb128 0x6
 1942 00e8 40       		.uleb128 0x40
 1943 00e9 18       		.uleb128 0x18
 1944 00ea 9742     		.uleb128 0x2117
 1945 00ec 19       		.uleb128 0x19
 1946 00ed 00       		.byte	0
 1947 00ee 00       		.byte	0
 1948 00ef 12       		.uleb128 0x12
 1949 00f0 2E       		.uleb128 0x2e
 1950 00f1 01       		.byte	0x1
 1951 00f2 3F       		.uleb128 0x3f
 1952 00f3 19       		.uleb128 0x19
 1953 00f4 03       		.uleb128 0x3
 1954 00f5 0E       		.uleb128 0xe
 1955 00f6 3A       		.uleb128 0x3a
 1956 00f7 0B       		.uleb128 0xb
 1957 00f8 3B       		.uleb128 0x3b
 1958 00f9 05       		.uleb128 0x5
 1959 00fa 27       		.uleb128 0x27
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 51


 1960 00fb 19       		.uleb128 0x19
 1961 00fc 49       		.uleb128 0x49
 1962 00fd 13       		.uleb128 0x13
 1963 00fe 11       		.uleb128 0x11
 1964 00ff 01       		.uleb128 0x1
 1965 0100 12       		.uleb128 0x12
 1966 0101 06       		.uleb128 0x6
 1967 0102 40       		.uleb128 0x40
 1968 0103 18       		.uleb128 0x18
 1969 0104 9742     		.uleb128 0x2117
 1970 0106 19       		.uleb128 0x19
 1971 0107 01       		.uleb128 0x1
 1972 0108 13       		.uleb128 0x13
 1973 0109 00       		.byte	0
 1974 010a 00       		.byte	0
 1975 010b 13       		.uleb128 0x13
 1976 010c 05       		.uleb128 0x5
 1977 010d 00       		.byte	0
 1978 010e 03       		.uleb128 0x3
 1979 010f 0E       		.uleb128 0xe
 1980 0110 3A       		.uleb128 0x3a
 1981 0111 0B       		.uleb128 0xb
 1982 0112 3B       		.uleb128 0x3b
 1983 0113 05       		.uleb128 0x5
 1984 0114 49       		.uleb128 0x49
 1985 0115 13       		.uleb128 0x13
 1986 0116 02       		.uleb128 0x2
 1987 0117 17       		.uleb128 0x17
 1988 0118 00       		.byte	0
 1989 0119 00       		.byte	0
 1990 011a 14       		.uleb128 0x14
 1991 011b 34       		.uleb128 0x34
 1992 011c 00       		.byte	0
 1993 011d 03       		.uleb128 0x3
 1994 011e 0E       		.uleb128 0xe
 1995 011f 3A       		.uleb128 0x3a
 1996 0120 0B       		.uleb128 0xb
 1997 0121 3B       		.uleb128 0x3b
 1998 0122 05       		.uleb128 0x5
 1999 0123 49       		.uleb128 0x49
 2000 0124 13       		.uleb128 0x13
 2001 0125 02       		.uleb128 0x2
 2002 0126 17       		.uleb128 0x17
 2003 0127 00       		.byte	0
 2004 0128 00       		.byte	0
 2005 0129 15       		.uleb128 0x15
 2006 012a 2E       		.uleb128 0x2e
 2007 012b 01       		.byte	0x1
 2008 012c 3F       		.uleb128 0x3f
 2009 012d 19       		.uleb128 0x19
 2010 012e 03       		.uleb128 0x3
 2011 012f 0E       		.uleb128 0xe
 2012 0130 3A       		.uleb128 0x3a
 2013 0131 0B       		.uleb128 0xb
 2014 0132 3B       		.uleb128 0x3b
 2015 0133 05       		.uleb128 0x5
 2016 0134 27       		.uleb128 0x27
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 52


 2017 0135 19       		.uleb128 0x19
 2018 0136 49       		.uleb128 0x49
 2019 0137 13       		.uleb128 0x13
 2020 0138 11       		.uleb128 0x11
 2021 0139 01       		.uleb128 0x1
 2022 013a 12       		.uleb128 0x12
 2023 013b 06       		.uleb128 0x6
 2024 013c 40       		.uleb128 0x40
 2025 013d 18       		.uleb128 0x18
 2026 013e 9642     		.uleb128 0x2116
 2027 0140 19       		.uleb128 0x19
 2028 0141 01       		.uleb128 0x1
 2029 0142 13       		.uleb128 0x13
 2030 0143 00       		.byte	0
 2031 0144 00       		.byte	0
 2032 0145 16       		.uleb128 0x16
 2033 0146 34       		.uleb128 0x34
 2034 0147 00       		.byte	0
 2035 0148 03       		.uleb128 0x3
 2036 0149 0E       		.uleb128 0xe
 2037 014a 3A       		.uleb128 0x3a
 2038 014b 0B       		.uleb128 0xb
 2039 014c 3B       		.uleb128 0x3b
 2040 014d 05       		.uleb128 0x5
 2041 014e 49       		.uleb128 0x49
 2042 014f 13       		.uleb128 0x13
 2043 0150 02       		.uleb128 0x2
 2044 0151 18       		.uleb128 0x18
 2045 0152 00       		.byte	0
 2046 0153 00       		.byte	0
 2047 0154 17       		.uleb128 0x17
 2048 0155 34       		.uleb128 0x34
 2049 0156 00       		.byte	0
 2050 0157 03       		.uleb128 0x3
 2051 0158 0E       		.uleb128 0xe
 2052 0159 3A       		.uleb128 0x3a
 2053 015a 0B       		.uleb128 0xb
 2054 015b 3B       		.uleb128 0x3b
 2055 015c 05       		.uleb128 0x5
 2056 015d 49       		.uleb128 0x49
 2057 015e 13       		.uleb128 0x13
 2058 015f 00       		.byte	0
 2059 0160 00       		.byte	0
 2060 0161 18       		.uleb128 0x18
 2061 0162 34       		.uleb128 0x34
 2062 0163 00       		.byte	0
 2063 0164 03       		.uleb128 0x3
 2064 0165 0E       		.uleb128 0xe
 2065 0166 3A       		.uleb128 0x3a
 2066 0167 0B       		.uleb128 0xb
 2067 0168 3B       		.uleb128 0x3b
 2068 0169 0B       		.uleb128 0xb
 2069 016a 49       		.uleb128 0x49
 2070 016b 13       		.uleb128 0x13
 2071 016c 3F       		.uleb128 0x3f
 2072 016d 19       		.uleb128 0x19
 2073 016e 02       		.uleb128 0x2
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 53


 2074 016f 18       		.uleb128 0x18
 2075 0170 00       		.byte	0
 2076 0171 00       		.byte	0
 2077 0172 19       		.uleb128 0x19
 2078 0173 2E       		.uleb128 0x2e
 2079 0174 00       		.byte	0
 2080 0175 3F       		.uleb128 0x3f
 2081 0176 19       		.uleb128 0x19
 2082 0177 3C       		.uleb128 0x3c
 2083 0178 19       		.uleb128 0x19
 2084 0179 6E       		.uleb128 0x6e
 2085 017a 0E       		.uleb128 0xe
 2086 017b 03       		.uleb128 0x3
 2087 017c 0E       		.uleb128 0xe
 2088 017d 3A       		.uleb128 0x3a
 2089 017e 0B       		.uleb128 0xb
 2090 017f 3B       		.uleb128 0x3b
 2091 0180 0B       		.uleb128 0xb
 2092 0181 00       		.byte	0
 2093 0182 00       		.byte	0
 2094 0183 00       		.byte	0
 2095              		.section	.debug_loc,"",%progbits
 2096              	.Ldebug_loc0:
 2097              	.LLST0:
 2098 0000 7E000000 		.4byte	.LVL5
 2099 0004 82000000 		.4byte	.LVL6
 2100 0008 0200     		.2byte	0x2
 2101 000a 30       		.byte	0x30
 2102 000b 9F       		.byte	0x9f
 2103 000c 82000000 		.4byte	.LVL6
 2104 0010 88010000 		.4byte	.LFE1
 2105 0014 0100     		.2byte	0x1
 2106 0016 52       		.byte	0x52
 2107 0017 00000000 		.4byte	0
 2108 001b 00000000 		.4byte	0
 2109              	.LLST1:
 2110 001f 76000000 		.4byte	.LVL2
 2111 0023 7A000000 		.4byte	.LVL3
 2112 0027 0100     		.2byte	0x1
 2113 0029 50       		.byte	0x50
 2114 002a 7A000000 		.4byte	.LVL3
 2115 002e 7C000000 		.4byte	.LVL4
 2116 0032 0100     		.2byte	0x1
 2117 0034 52       		.byte	0x52
 2118 0035 7C000000 		.4byte	.LVL4
 2119 0039 82000000 		.4byte	.LVL6
 2120 003d 0100     		.2byte	0x1
 2121 003f 53       		.byte	0x53
 2122 0040 8E000000 		.4byte	.LVL7
 2123 0044 A0000000 		.4byte	.LVL9
 2124 0048 0100     		.2byte	0x1
 2125 004a 53       		.byte	0x53
 2126 004b A0000000 		.4byte	.LVL9
 2127 004f A4000000 		.4byte	.LVL10
 2128 0053 0200     		.2byte	0x2
 2129 0055 71       		.byte	0x71
 2130 0056 00       		.sleb128 0
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 54


 2131 0057 A4000000 		.4byte	.LVL10
 2132 005b B0000000 		.4byte	.LVL11
 2133 005f 0700     		.2byte	0x7
 2134 0061 72       		.byte	0x72
 2135 0062 00       		.sleb128 0
 2136 0063 32       		.byte	0x32
 2137 0064 24       		.byte	0x24
 2138 0065 7C       		.byte	0x7c
 2139 0066 00       		.sleb128 0
 2140 0067 22       		.byte	0x22
 2141 0068 B0000000 		.4byte	.LVL11
 2142 006c B4000000 		.4byte	.LVL12
 2143 0070 1500     		.2byte	0x15
 2144 0072 74       		.byte	0x74
 2145 0073 00       		.sleb128 0
 2146 0074 0A       		.byte	0xa
 2147 0075 0037     		.2byte	0x3700
 2148 0077 1A       		.byte	0x1a
 2149 0078 72       		.byte	0x72
 2150 0079 00       		.sleb128 0
 2151 007a 03       		.byte	0x3
 2152 007b 08000000 		.4byte	.LANCHOR0+8
 2153 007f 22       		.byte	0x22
 2154 0080 94       		.byte	0x94
 2155 0081 01       		.byte	0x1
 2156 0082 08       		.byte	0x8
 2157 0083 FF       		.byte	0xff
 2158 0084 1A       		.byte	0x1a
 2159 0085 21       		.byte	0x21
 2160 0086 9F       		.byte	0x9f
 2161 0087 B4000000 		.4byte	.LVL12
 2162 008b BE000000 		.4byte	.LVL13
 2163 008f 1400     		.2byte	0x14
 2164 0091 74       		.byte	0x74
 2165 0092 00       		.sleb128 0
 2166 0093 0A       		.byte	0xa
 2167 0094 0037     		.2byte	0x3700
 2168 0096 1A       		.byte	0x1a
 2169 0097 71       		.byte	0x71
 2170 0098 00       		.sleb128 0
 2171 0099 72       		.byte	0x72
 2172 009a 00       		.sleb128 0
 2173 009b 22       		.byte	0x22
 2174 009c 23       		.byte	0x23
 2175 009d 08       		.uleb128 0x8
 2176 009e 94       		.byte	0x94
 2177 009f 01       		.byte	0x1
 2178 00a0 08       		.byte	0x8
 2179 00a1 FF       		.byte	0xff
 2180 00a2 1A       		.byte	0x1a
 2181 00a3 21       		.byte	0x21
 2182 00a4 9F       		.byte	0x9f
 2183 00a5 BE000000 		.4byte	.LVL13
 2184 00a9 CE000000 		.4byte	.LVL14
 2185 00ad 1500     		.2byte	0x15
 2186 00af 74       		.byte	0x74
 2187 00b0 00       		.sleb128 0
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 55


 2188 00b1 0A       		.byte	0xa
 2189 00b2 0037     		.2byte	0x3700
 2190 00b4 1A       		.byte	0x1a
 2191 00b5 72       		.byte	0x72
 2192 00b6 00       		.sleb128 0
 2193 00b7 03       		.byte	0x3
 2194 00b8 08000000 		.4byte	.LANCHOR0+8
 2195 00bc 22       		.byte	0x22
 2196 00bd 94       		.byte	0x94
 2197 00be 01       		.byte	0x1
 2198 00bf 08       		.byte	0x8
 2199 00c0 FF       		.byte	0xff
 2200 00c1 1A       		.byte	0x1a
 2201 00c2 21       		.byte	0x21
 2202 00c3 9F       		.byte	0x9f
 2203 00c4 CE000000 		.4byte	.LVL14
 2204 00c8 D0000000 		.4byte	.LVL15
 2205 00cc 1400     		.2byte	0x14
 2206 00ce 74       		.byte	0x74
 2207 00cf 00       		.sleb128 0
 2208 00d0 0A       		.byte	0xa
 2209 00d1 0037     		.2byte	0x3700
 2210 00d3 1A       		.byte	0x1a
 2211 00d4 71       		.byte	0x71
 2212 00d5 00       		.sleb128 0
 2213 00d6 72       		.byte	0x72
 2214 00d7 00       		.sleb128 0
 2215 00d8 22       		.byte	0x22
 2216 00d9 23       		.byte	0x23
 2217 00da 08       		.uleb128 0x8
 2218 00db 94       		.byte	0x94
 2219 00dc 01       		.byte	0x1
 2220 00dd 08       		.byte	0x8
 2221 00de FF       		.byte	0xff
 2222 00df 1A       		.byte	0x1a
 2223 00e0 21       		.byte	0x21
 2224 00e1 9F       		.byte	0x9f
 2225 00e2 D0000000 		.4byte	.LVL15
 2226 00e6 E6000000 		.4byte	.LVL17
 2227 00ea 1500     		.2byte	0x15
 2228 00ec 74       		.byte	0x74
 2229 00ed 00       		.sleb128 0
 2230 00ee 0A       		.byte	0xa
 2231 00ef 0037     		.2byte	0x3700
 2232 00f1 1A       		.byte	0x1a
 2233 00f2 72       		.byte	0x72
 2234 00f3 00       		.sleb128 0
 2235 00f4 03       		.byte	0x3
 2236 00f5 08000000 		.4byte	.LANCHOR0+8
 2237 00f9 22       		.byte	0x22
 2238 00fa 94       		.byte	0x94
 2239 00fb 01       		.byte	0x1
 2240 00fc 08       		.byte	0x8
 2241 00fd FF       		.byte	0xff
 2242 00fe 1A       		.byte	0x1a
 2243 00ff 21       		.byte	0x21
 2244 0100 9F       		.byte	0x9f
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 56


 2245 0101 E6000000 		.4byte	.LVL17
 2246 0105 EC000000 		.4byte	.LVL18
 2247 0109 1E00     		.2byte	0x1e
 2248 010b 72       		.byte	0x72
 2249 010c 00       		.sleb128 0
 2250 010d 32       		.byte	0x32
 2251 010e 24       		.byte	0x24
 2252 010f 03       		.byte	0x3
 2253 0110 00000000 		.4byte	.LANCHOR0
 2254 0114 22       		.byte	0x22
 2255 0115 06       		.byte	0x6
 2256 0116 0A       		.byte	0xa
 2257 0117 0037     		.2byte	0x3700
 2258 0119 1A       		.byte	0x1a
 2259 011a 72       		.byte	0x72
 2260 011b 00       		.sleb128 0
 2261 011c 03       		.byte	0x3
 2262 011d 08000000 		.4byte	.LANCHOR0+8
 2263 0121 22       		.byte	0x22
 2264 0122 94       		.byte	0x94
 2265 0123 01       		.byte	0x1
 2266 0124 08       		.byte	0x8
 2267 0125 FF       		.byte	0xff
 2268 0126 1A       		.byte	0x1a
 2269 0127 21       		.byte	0x21
 2270 0128 9F       		.byte	0x9f
 2271 0129 EC000000 		.4byte	.LVL18
 2272 012d F0000000 		.4byte	.LVL19
 2273 0131 1500     		.2byte	0x15
 2274 0133 74       		.byte	0x74
 2275 0134 00       		.sleb128 0
 2276 0135 0A       		.byte	0xa
 2277 0136 0037     		.2byte	0x3700
 2278 0138 1A       		.byte	0x1a
 2279 0139 72       		.byte	0x72
 2280 013a 00       		.sleb128 0
 2281 013b 03       		.byte	0x3
 2282 013c 08000000 		.4byte	.LANCHOR0+8
 2283 0140 22       		.byte	0x22
 2284 0141 94       		.byte	0x94
 2285 0142 01       		.byte	0x1
 2286 0143 08       		.byte	0x8
 2287 0144 FF       		.byte	0xff
 2288 0145 1A       		.byte	0x1a
 2289 0146 21       		.byte	0x21
 2290 0147 9F       		.byte	0x9f
 2291 0148 F0000000 		.4byte	.LVL19
 2292 014c 14010000 		.4byte	.LVL21
 2293 0150 1E00     		.2byte	0x1e
 2294 0152 72       		.byte	0x72
 2295 0153 00       		.sleb128 0
 2296 0154 32       		.byte	0x32
 2297 0155 24       		.byte	0x24
 2298 0156 03       		.byte	0x3
 2299 0157 00000000 		.4byte	.LANCHOR0
 2300 015b 22       		.byte	0x22
 2301 015c 06       		.byte	0x6
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 57


 2302 015d 0A       		.byte	0xa
 2303 015e 0037     		.2byte	0x3700
 2304 0160 1A       		.byte	0x1a
 2305 0161 72       		.byte	0x72
 2306 0162 00       		.sleb128 0
 2307 0163 03       		.byte	0x3
 2308 0164 08000000 		.4byte	.LANCHOR0+8
 2309 0168 22       		.byte	0x22
 2310 0169 94       		.byte	0x94
 2311 016a 01       		.byte	0x1
 2312 016b 08       		.byte	0x8
 2313 016c FF       		.byte	0xff
 2314 016d 1A       		.byte	0x1a
 2315 016e 21       		.byte	0x21
 2316 016f 9F       		.byte	0x9f
 2317 0170 00000000 		.4byte	0
 2318 0174 00000000 		.4byte	0
 2319              	.LLST2:
 2320 0178 DE000000 		.4byte	.LVL16
 2321 017c 0E010000 		.4byte	.LVL20
 2322 0180 0100     		.2byte	0x1
 2323 0182 50       		.byte	0x50
 2324 0183 00000000 		.4byte	0
 2325 0187 00000000 		.4byte	0
 2326              	.LLST3:
 2327 018b 00000000 		.4byte	.LVL25
 2328 018f 06000000 		.4byte	.LVL27
 2329 0193 0100     		.2byte	0x1
 2330 0195 50       		.byte	0x50
 2331 0196 06000000 		.4byte	.LVL27
 2332 019a 1A000000 		.4byte	.LVL29
 2333 019e 0100     		.2byte	0x1
 2334 01a0 52       		.byte	0x52
 2335 01a1 1A000000 		.4byte	.LVL29
 2336 01a5 20000000 		.4byte	.LVL30
 2337 01a9 0400     		.2byte	0x4
 2338 01ab F3       		.byte	0xf3
 2339 01ac 01       		.uleb128 0x1
 2340 01ad 50       		.byte	0x50
 2341 01ae 9F       		.byte	0x9f
 2342 01af 20000000 		.4byte	.LVL30
 2343 01b3 22000000 		.4byte	.LVL31
 2344 01b7 0100     		.2byte	0x1
 2345 01b9 50       		.byte	0x50
 2346 01ba 22000000 		.4byte	.LVL31
 2347 01be 28000000 		.4byte	.LFE6
 2348 01c2 0400     		.2byte	0x4
 2349 01c4 F3       		.byte	0xf3
 2350 01c5 01       		.uleb128 0x1
 2351 01c6 50       		.byte	0x50
 2352 01c7 9F       		.byte	0x9f
 2353 01c8 00000000 		.4byte	0
 2354 01cc 00000000 		.4byte	0
 2355              	.LLST4:
 2356 01d0 02000000 		.4byte	.LVL26
 2357 01d4 06000000 		.4byte	.LVL27
 2358 01d8 0200     		.2byte	0x2
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 58


 2359 01da 30       		.byte	0x30
 2360 01db 9F       		.byte	0x9f
 2361 01dc 0E000000 		.4byte	.LVL28
 2362 01e0 20000000 		.4byte	.LVL30
 2363 01e4 0100     		.2byte	0x1
 2364 01e6 50       		.byte	0x50
 2365 01e7 20000000 		.4byte	.LVL30
 2366 01eb 22000000 		.4byte	.LVL31
 2367 01ef 0200     		.2byte	0x2
 2368 01f1 30       		.byte	0x30
 2369 01f2 9F       		.byte	0x9f
 2370 01f3 22000000 		.4byte	.LVL31
 2371 01f7 28000000 		.4byte	.LFE6
 2372 01fb 0100     		.2byte	0x1
 2373 01fd 50       		.byte	0x50
 2374 01fe 00000000 		.4byte	0
 2375 0202 00000000 		.4byte	0
 2376              	.LLST5:
 2377 0206 00000000 		.4byte	.LVL32
 2378 020a 0A000000 		.4byte	.LVL33
 2379 020e 0100     		.2byte	0x1
 2380 0210 50       		.byte	0x50
 2381 0211 0A000000 		.4byte	.LVL33
 2382 0215 14000000 		.4byte	.LVL35
 2383 0219 0100     		.2byte	0x1
 2384 021b 54       		.byte	0x54
 2385 021c 14000000 		.4byte	.LVL35
 2386 0220 22000000 		.4byte	.LVL37
 2387 0224 0400     		.2byte	0x4
 2388 0226 F3       		.byte	0xf3
 2389 0227 01       		.uleb128 0x1
 2390 0228 50       		.byte	0x50
 2391 0229 9F       		.byte	0x9f
 2392 022a 22000000 		.4byte	.LVL37
 2393 022e 24000000 		.4byte	.LVL38
 2394 0232 0100     		.2byte	0x1
 2395 0234 54       		.byte	0x54
 2396 0235 24000000 		.4byte	.LVL38
 2397 0239 2C000000 		.4byte	.LFE7
 2398 023d 0400     		.2byte	0x4
 2399 023f F3       		.byte	0xf3
 2400 0240 01       		.uleb128 0x1
 2401 0241 50       		.byte	0x50
 2402 0242 9F       		.byte	0x9f
 2403 0243 00000000 		.4byte	0
 2404 0247 00000000 		.4byte	0
 2405              	.LLST6:
 2406 024b 20000000 		.4byte	.LVL36
 2407 024f 22000000 		.4byte	.LVL37
 2408 0253 0100     		.2byte	0x1
 2409 0255 50       		.byte	0x50
 2410 0256 24000000 		.4byte	.LVL38
 2411 025a 26000000 		.4byte	.LVL39
 2412 025e 0100     		.2byte	0x1
 2413 0260 50       		.byte	0x50
 2414 0261 00000000 		.4byte	0
 2415 0265 00000000 		.4byte	0
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 59


 2416              	.LLST7:
 2417 0269 00000000 		.4byte	.LVL40
 2418 026d 04000000 		.4byte	.LVL41
 2419 0271 0100     		.2byte	0x1
 2420 0273 50       		.byte	0x50
 2421 0274 04000000 		.4byte	.LVL41
 2422 0278 10000000 		.4byte	.LFE8
 2423 027c 0400     		.2byte	0x4
 2424 027e F3       		.byte	0xf3
 2425 027f 01       		.uleb128 0x1
 2426 0280 50       		.byte	0x50
 2427 0281 9F       		.byte	0x9f
 2428 0282 00000000 		.4byte	0
 2429 0286 00000000 		.4byte	0
 2430              	.LLST8:
 2431 028a 00000000 		.4byte	.LVL42
 2432 028e 0E000000 		.4byte	.LVL43
 2433 0292 0100     		.2byte	0x1
 2434 0294 50       		.byte	0x50
 2435 0295 0E000000 		.4byte	.LVL43
 2436 0299 1C000000 		.4byte	.LFE9
 2437 029d 0400     		.2byte	0x4
 2438 029f F3       		.byte	0xf3
 2439 02a0 01       		.uleb128 0x1
 2440 02a1 50       		.byte	0x50
 2441 02a2 9F       		.byte	0x9f
 2442 02a3 00000000 		.4byte	0
 2443 02a7 00000000 		.4byte	0
 2444              	.LLST9:
 2445 02ab 00000000 		.4byte	.LVL44
 2446 02af 0E000000 		.4byte	.LVL45
 2447 02b3 0100     		.2byte	0x1
 2448 02b5 50       		.byte	0x50
 2449 02b6 0E000000 		.4byte	.LVL45
 2450 02ba 18000000 		.4byte	.LFE10
 2451 02be 0400     		.2byte	0x4
 2452 02c0 F3       		.byte	0xf3
 2453 02c1 01       		.uleb128 0x1
 2454 02c2 50       		.byte	0x50
 2455 02c3 9F       		.byte	0x9f
 2456 02c4 00000000 		.4byte	0
 2457 02c8 00000000 		.4byte	0
 2458              	.LLST10:
 2459 02cc 00000000 		.4byte	.LVL46
 2460 02d0 04000000 		.4byte	.LVL47
 2461 02d4 0100     		.2byte	0x1
 2462 02d6 50       		.byte	0x50
 2463 02d7 04000000 		.4byte	.LVL47
 2464 02db 10000000 		.4byte	.LFE11
 2465 02df 0400     		.2byte	0x4
 2466 02e1 F3       		.byte	0xf3
 2467 02e2 01       		.uleb128 0x1
 2468 02e3 50       		.byte	0x50
 2469 02e4 9F       		.byte	0x9f
 2470 02e5 00000000 		.4byte	0
 2471 02e9 00000000 		.4byte	0
 2472              	.LLST11:
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 60


 2473 02ed 00000000 		.4byte	.LVL48
 2474 02f1 04000000 		.4byte	.LVL49
 2475 02f5 0100     		.2byte	0x1
 2476 02f7 50       		.byte	0x50
 2477 02f8 04000000 		.4byte	.LVL49
 2478 02fc 10000000 		.4byte	.LFE12
 2479 0300 0400     		.2byte	0x4
 2480 0302 F3       		.byte	0xf3
 2481 0303 01       		.uleb128 0x1
 2482 0304 50       		.byte	0x50
 2483 0305 9F       		.byte	0x9f
 2484 0306 00000000 		.4byte	0
 2485 030a 00000000 		.4byte	0
 2486              	.LLST12:
 2487 030e 00000000 		.4byte	.LVL50
 2488 0312 0C000000 		.4byte	.LVL51
 2489 0316 0100     		.2byte	0x1
 2490 0318 50       		.byte	0x50
 2491 0319 0C000000 		.4byte	.LVL51
 2492 031d 12000000 		.4byte	.LVL53
 2493 0321 0100     		.2byte	0x1
 2494 0323 54       		.byte	0x54
 2495 0324 12000000 		.4byte	.LVL53
 2496 0328 1C000000 		.4byte	.LFE13
 2497 032c 0400     		.2byte	0x4
 2498 032e F3       		.byte	0xf3
 2499 032f 01       		.uleb128 0x1
 2500 0330 50       		.byte	0x50
 2501 0331 9F       		.byte	0x9f
 2502 0332 00000000 		.4byte	0
 2503 0336 00000000 		.4byte	0
 2504              	.LLST13:
 2505 033a 00000000 		.4byte	.LVL50
 2506 033e 0F000000 		.4byte	.LVL52-1
 2507 0342 0100     		.2byte	0x1
 2508 0344 51       		.byte	0x51
 2509 0345 0F000000 		.4byte	.LVL52-1
 2510 0349 1C000000 		.4byte	.LFE13
 2511 034d 0400     		.2byte	0x4
 2512 034f F3       		.byte	0xf3
 2513 0350 01       		.uleb128 0x1
 2514 0351 51       		.byte	0x51
 2515 0352 9F       		.byte	0x9f
 2516 0353 00000000 		.4byte	0
 2517 0357 00000000 		.4byte	0
 2518              	.LLST14:
 2519 035b 00000000 		.4byte	.LVL54
 2520 035f 0C000000 		.4byte	.LVL55
 2521 0363 0100     		.2byte	0x1
 2522 0365 50       		.byte	0x50
 2523 0366 0C000000 		.4byte	.LVL55
 2524 036a 12000000 		.4byte	.LVL57
 2525 036e 0100     		.2byte	0x1
 2526 0370 54       		.byte	0x54
 2527 0371 12000000 		.4byte	.LVL57
 2528 0375 1C000000 		.4byte	.LFE14
 2529 0379 0400     		.2byte	0x4
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 61


 2530 037b F3       		.byte	0xf3
 2531 037c 01       		.uleb128 0x1
 2532 037d 50       		.byte	0x50
 2533 037e 9F       		.byte	0x9f
 2534 037f 00000000 		.4byte	0
 2535 0383 00000000 		.4byte	0
 2536              	.LLST15:
 2537 0387 00000000 		.4byte	.LVL54
 2538 038b 0F000000 		.4byte	.LVL56-1
 2539 038f 0100     		.2byte	0x1
 2540 0391 51       		.byte	0x51
 2541 0392 0F000000 		.4byte	.LVL56-1
 2542 0396 16000000 		.4byte	.LVL58
 2543 039a 0100     		.2byte	0x1
 2544 039c 55       		.byte	0x55
 2545 039d 16000000 		.4byte	.LVL58
 2546 03a1 1C000000 		.4byte	.LFE14
 2547 03a5 0800     		.2byte	0x8
 2548 03a7 F3       		.byte	0xf3
 2549 03a8 01       		.uleb128 0x1
 2550 03a9 50       		.byte	0x50
 2551 03aa 32       		.byte	0x32
 2552 03ab 24       		.byte	0x24
 2553 03ac 73       		.byte	0x73
 2554 03ad 00       		.sleb128 0
 2555 03ae 22       		.byte	0x22
 2556 03af 00000000 		.4byte	0
 2557 03b3 00000000 		.4byte	0
 2558              	.LLST16:
 2559 03b7 00000000 		.4byte	.LVL59
 2560 03bb 0C000000 		.4byte	.LVL60
 2561 03bf 0100     		.2byte	0x1
 2562 03c1 50       		.byte	0x50
 2563 03c2 0C000000 		.4byte	.LVL60
 2564 03c6 44000000 		.4byte	.LVL63
 2565 03ca 0100     		.2byte	0x1
 2566 03cc 54       		.byte	0x54
 2567 03cd 44000000 		.4byte	.LVL63
 2568 03d1 5C000000 		.4byte	.LFE15
 2569 03d5 0400     		.2byte	0x4
 2570 03d7 F3       		.byte	0xf3
 2571 03d8 01       		.uleb128 0x1
 2572 03d9 50       		.byte	0x50
 2573 03da 9F       		.byte	0x9f
 2574 03db 00000000 		.4byte	0
 2575 03df 00000000 		.4byte	0
 2576              	.LLST17:
 2577 03e3 00000000 		.4byte	.LVL59
 2578 03e7 0F000000 		.4byte	.LVL61-1
 2579 03eb 0100     		.2byte	0x1
 2580 03ed 51       		.byte	0x51
 2581 03ee 0F000000 		.4byte	.LVL61-1
 2582 03f2 1C000000 		.4byte	.LVL62
 2583 03f6 0400     		.2byte	0x4
 2584 03f8 F3       		.byte	0xf3
 2585 03f9 01       		.uleb128 0x1
 2586 03fa 51       		.byte	0x51
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 62


 2587 03fb 9F       		.byte	0x9f
 2588 03fc 1C000000 		.4byte	.LVL62
 2589 0400 48000000 		.4byte	.LVL64
 2590 0404 0100     		.2byte	0x1
 2591 0406 51       		.byte	0x51
 2592 0407 00000000 		.4byte	0
 2593 040b 00000000 		.4byte	0
 2594              	.LLST18:
 2595 040f 00000000 		.4byte	.LVL67
 2596 0413 0C000000 		.4byte	.LVL68
 2597 0417 0100     		.2byte	0x1
 2598 0419 50       		.byte	0x50
 2599 041a 0C000000 		.4byte	.LVL68
 2600 041e 28000000 		.4byte	.LVL72
 2601 0422 0100     		.2byte	0x1
 2602 0424 55       		.byte	0x55
 2603 0425 28000000 		.4byte	.LVL72
 2604 0429 40000000 		.4byte	.LFE16
 2605 042d 0400     		.2byte	0x4
 2606 042f F3       		.byte	0xf3
 2607 0430 01       		.uleb128 0x1
 2608 0431 50       		.byte	0x50
 2609 0432 9F       		.byte	0x9f
 2610 0433 00000000 		.4byte	0
 2611 0437 00000000 		.4byte	0
 2612              	.LLST19:
 2613 043b 00000000 		.4byte	.LVL67
 2614 043f 0F000000 		.4byte	.LVL69-1
 2615 0443 0100     		.2byte	0x1
 2616 0445 51       		.byte	0x51
 2617 0446 0F000000 		.4byte	.LVL69-1
 2618 044a 1C000000 		.4byte	.LVL70
 2619 044e 0400     		.2byte	0x4
 2620 0450 F3       		.byte	0xf3
 2621 0451 01       		.uleb128 0x1
 2622 0452 51       		.byte	0x51
 2623 0453 9F       		.byte	0x9f
 2624 0454 1C000000 		.4byte	.LVL70
 2625 0458 25000000 		.4byte	.LVL71-1
 2626 045c 0100     		.2byte	0x1
 2627 045e 50       		.byte	0x50
 2628 045f 00000000 		.4byte	0
 2629 0463 00000000 		.4byte	0
 2630              	.LLST20:
 2631 0467 00000000 		.4byte	.LVL74
 2632 046b 0C000000 		.4byte	.LVL75
 2633 046f 0100     		.2byte	0x1
 2634 0471 50       		.byte	0x50
 2635 0472 0C000000 		.4byte	.LVL75
 2636 0476 2A000000 		.4byte	.LVL80
 2637 047a 0100     		.2byte	0x1
 2638 047c 54       		.byte	0x54
 2639 047d 2A000000 		.4byte	.LVL80
 2640 0481 48000000 		.4byte	.LFE17
 2641 0485 0400     		.2byte	0x4
 2642 0487 F3       		.byte	0xf3
 2643 0488 01       		.uleb128 0x1
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 63


 2644 0489 50       		.byte	0x50
 2645 048a 9F       		.byte	0x9f
 2646 048b 00000000 		.4byte	0
 2647 048f 00000000 		.4byte	0
 2648              	.LLST21:
 2649 0493 00000000 		.4byte	.LVL74
 2650 0497 0F000000 		.4byte	.LVL76-1
 2651 049b 0100     		.2byte	0x1
 2652 049d 51       		.byte	0x51
 2653 049e 0F000000 		.4byte	.LVL76-1
 2654 04a2 1C000000 		.4byte	.LVL77
 2655 04a6 0400     		.2byte	0x4
 2656 04a8 F3       		.byte	0xf3
 2657 04a9 01       		.uleb128 0x1
 2658 04aa 51       		.byte	0x51
 2659 04ab 9F       		.byte	0x9f
 2660 04ac 1C000000 		.4byte	.LVL77
 2661 04b0 1F000000 		.4byte	.LVL78-1
 2662 04b4 0100     		.2byte	0x1
 2663 04b6 50       		.byte	0x50
 2664 04b7 00000000 		.4byte	0
 2665 04bb 00000000 		.4byte	0
 2666              		.section	.debug_aranges,"",%progbits
 2667 0000 A4000000 		.4byte	0xa4
 2668 0004 0200     		.2byte	0x2
 2669 0006 00000000 		.4byte	.Ldebug_info0
 2670 000a 04       		.byte	0x4
 2671 000b 00       		.byte	0
 2672 000c 0000     		.2byte	0
 2673 000e 0000     		.2byte	0
 2674 0010 00000000 		.4byte	.LFB1
 2675 0014 88010000 		.4byte	.LFE1-.LFB1
 2676 0018 00000000 		.4byte	.LFB2
 2677 001c 24000000 		.4byte	.LFE2-.LFB2
 2678 0020 00000000 		.4byte	.LFB0
 2679 0024 20000000 		.4byte	.LFE0-.LFB0
 2680 0028 00000000 		.4byte	.LFB3
 2681 002c 10000000 		.4byte	.LFE3-.LFB3
 2682 0030 00000000 		.4byte	.LFB4
 2683 0034 14000000 		.4byte	.LFE4-.LFB4
 2684 0038 00000000 		.4byte	.LFB5
 2685 003c 14000000 		.4byte	.LFE5-.LFB5
 2686 0040 00000000 		.4byte	.LFB6
 2687 0044 28000000 		.4byte	.LFE6-.LFB6
 2688 0048 00000000 		.4byte	.LFB7
 2689 004c 2C000000 		.4byte	.LFE7-.LFB7
 2690 0050 00000000 		.4byte	.LFB8
 2691 0054 10000000 		.4byte	.LFE8-.LFB8
 2692 0058 00000000 		.4byte	.LFB9
 2693 005c 1C000000 		.4byte	.LFE9-.LFB9
 2694 0060 00000000 		.4byte	.LFB10
 2695 0064 18000000 		.4byte	.LFE10-.LFB10
 2696 0068 00000000 		.4byte	.LFB11
 2697 006c 10000000 		.4byte	.LFE11-.LFB11
 2698 0070 00000000 		.4byte	.LFB12
 2699 0074 10000000 		.4byte	.LFE12-.LFB12
 2700 0078 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 64


 2701 007c 1C000000 		.4byte	.LFE13-.LFB13
 2702 0080 00000000 		.4byte	.LFB14
 2703 0084 1C000000 		.4byte	.LFE14-.LFB14
 2704 0088 00000000 		.4byte	.LFB15
 2705 008c 5C000000 		.4byte	.LFE15-.LFB15
 2706 0090 00000000 		.4byte	.LFB16
 2707 0094 40000000 		.4byte	.LFE16-.LFB16
 2708 0098 00000000 		.4byte	.LFB17
 2709 009c 48000000 		.4byte	.LFE17-.LFB17
 2710 00a0 00000000 		.4byte	0
 2711 00a4 00000000 		.4byte	0
 2712              		.section	.debug_ranges,"",%progbits
 2713              	.Ldebug_ranges0:
 2714 0000 00000000 		.4byte	.LFB1
 2715 0004 88010000 		.4byte	.LFE1
 2716 0008 00000000 		.4byte	.LFB2
 2717 000c 24000000 		.4byte	.LFE2
 2718 0010 00000000 		.4byte	.LFB0
 2719 0014 20000000 		.4byte	.LFE0
 2720 0018 00000000 		.4byte	.LFB3
 2721 001c 10000000 		.4byte	.LFE3
 2722 0020 00000000 		.4byte	.LFB4
 2723 0024 14000000 		.4byte	.LFE4
 2724 0028 00000000 		.4byte	.LFB5
 2725 002c 14000000 		.4byte	.LFE5
 2726 0030 00000000 		.4byte	.LFB6
 2727 0034 28000000 		.4byte	.LFE6
 2728 0038 00000000 		.4byte	.LFB7
 2729 003c 2C000000 		.4byte	.LFE7
 2730 0040 00000000 		.4byte	.LFB8
 2731 0044 10000000 		.4byte	.LFE8
 2732 0048 00000000 		.4byte	.LFB9
 2733 004c 1C000000 		.4byte	.LFE9
 2734 0050 00000000 		.4byte	.LFB10
 2735 0054 18000000 		.4byte	.LFE10
 2736 0058 00000000 		.4byte	.LFB11
 2737 005c 10000000 		.4byte	.LFE11
 2738 0060 00000000 		.4byte	.LFB12
 2739 0064 10000000 		.4byte	.LFE12
 2740 0068 00000000 		.4byte	.LFB13
 2741 006c 1C000000 		.4byte	.LFE13
 2742 0070 00000000 		.4byte	.LFB14
 2743 0074 1C000000 		.4byte	.LFE14
 2744 0078 00000000 		.4byte	.LFB15
 2745 007c 5C000000 		.4byte	.LFE15
 2746 0080 00000000 		.4byte	.LFB16
 2747 0084 40000000 		.4byte	.LFE16
 2748 0088 00000000 		.4byte	.LFB17
 2749 008c 48000000 		.4byte	.LFE17
 2750 0090 00000000 		.4byte	0
 2751 0094 00000000 		.4byte	0
 2752              		.section	.debug_line,"",%progbits
 2753              	.Ldebug_line0:
 2754 0000 9F020000 		.section	.debug_str,"MS",%progbits,1
 2754      02005500 
 2754      00000201 
 2754      FB0E0D00 
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 65


 2754      01010101 
 2755              	.LASF58:
 2756 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2756      5341525F 
 2756      5365715F 
 2756      315F6F66 
 2756      66736574 
 2757              	.LASF10:
 2758 0015 75696E74 		.ascii	"uint16\000"
 2758      313600
 2759              	.LASF26:
 2760 001c 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2760      5341525F 
 2760      5365715F 
 2760      315F496E 
 2760      697400
 2761              	.LASF49:
 2762 002f 61646347 		.ascii	"adcGain\000"
 2762      61696E00 
 2763              	.LASF24:
 2764 0037 636F756E 		.ascii	"counts\000"
 2764      747300
 2765              	.LASF66:
 2766 003e 443A5C47 		.ascii	"D:\\GIT\\Microcontroller System Design Projects\\HW"
 2766      49545C4D 
 2766      6963726F 
 2766      636F6E74 
 2766      726F6C6C 
 2767 006e 352D4D69 		.ascii	"5-MiniScope\\MiniScope.cydsn\000"
 2767      6E695363 
 2767      6F70655C 
 2767      4D696E69 
 2767      53636F70 
 2768              	.LASF30:
 2769 008a 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2769      5341525F 
 2769      5365715F 
 2769      315F5374 
 2769      61727443 
 2770              	.LASF45:
 2771 00a5 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2771      5341525F 
 2771      5365715F 
 2771      315F5365 
 2771      74536174 
 2772              	.LASF64:
 2773 00be 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2773      43313120 
 2773      352E342E 
 2773      31203230 
 2773      31363036 
 2774 00f1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2774      20726576 
 2774      6973696F 
 2774      6E203233 
 2774      37373135 
 2775 0124 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 66


 2775      66756E63 
 2775      74696F6E 
 2775      2D736563 
 2775      74696F6E 
 2776              	.LASF28:
 2777 014c 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2777      5341525F 
 2777      5365715F 
 2777      315F5374 
 2777      61727400 
 2778              	.LASF7:
 2779 0160 6C6F6E67 		.ascii	"long long unsigned int\000"
 2779      206C6F6E 
 2779      6720756E 
 2779      7369676E 
 2779      65642069 
 2780              	.LASF27:
 2781 0177 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2781      5341525F 
 2781      5365715F 
 2781      315F456E 
 2781      61626C65 
 2782              	.LASF25:
 2783 018c 4144435F 		.ascii	"ADC_SAR_Seq_1_InputsPlacement\000"
 2783      5341525F 
 2783      5365715F 
 2783      315F496E 
 2783      70757473 
 2784              	.LASF34:
 2785 01aa 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2785      5341525F 
 2785      5365715F 
 2785      315F4765 
 2785      74526573 
 2786              	.LASF6:
 2787 01c4 6C6F6E67 		.ascii	"long long int\000"
 2787      206C6F6E 
 2787      6720696E 
 2787      7400
 2788              	.LASF0:
 2789 01d2 7369676E 		.ascii	"signed char\000"
 2789      65642063 
 2789      68617200 
 2790              	.LASF42:
 2791 01de 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2791      5341525F 
 2791      5365715F 
 2791      315F5365 
 2791      74486967 
 2792              	.LASF13:
 2793 01f9 696E7433 		.ascii	"int32\000"
 2793      3200
 2794              	.LASF53:
 2795 01ff 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2795      5341525F 
 2795      5365715F 
 2795      315F436F 
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 67


 2795      756E7473 
 2796              	.LASF4:
 2797 021d 6C6F6E67 		.ascii	"long int\000"
 2797      20696E74 
 2797      00
 2798              	.LASF9:
 2799 0226 75696E74 		.ascii	"uint8\000"
 2799      3800
 2800              	.LASF62:
 2801 022c 43794465 		.ascii	"CyDelayUs\000"
 2801      6C617955 
 2801      7300
 2802              	.LASF16:
 2803 0236 646F7562 		.ascii	"double\000"
 2803      6C6500
 2804              	.LASF11:
 2805 023d 75696E74 		.ascii	"uint32\000"
 2805      333200
 2806              	.LASF39:
 2807 0244 6D61736B 		.ascii	"mask\000"
 2807      00
 2808              	.LASF50:
 2809 0249 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2809      5341525F 
 2809      5365715F 
 2809      315F436F 
 2809      756E7473 
 2810              	.LASF35:
 2811 0267 7265744D 		.ascii	"retMode\000"
 2811      6F646500 
 2812              	.LASF57:
 2813 026f 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2813      5341525F 
 2813      5365715F 
 2813      315F696E 
 2813      69745661 
 2814              	.LASF8:
 2815 0285 756E7369 		.ascii	"unsigned int\000"
 2815      676E6564 
 2815      20696E74 
 2815      00
 2816              	.LASF67:
 2817 0292 75566F6C 		.ascii	"uVolts\000"
 2817      747300
 2818              	.LASF5:
 2819 0299 6C6F6E67 		.ascii	"long unsigned int\000"
 2819      20756E73 
 2819      69676E65 
 2819      6420696E 
 2819      7400
 2820              	.LASF55:
 2821 02ab 766F6C74 		.ascii	"volts\000"
 2821      7300
 2822              	.LASF23:
 2823 02b1 746D7052 		.ascii	"tmpRegVal\000"
 2823      65675661 
 2823      6C00
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 68


 2824              	.LASF3:
 2825 02bb 73686F72 		.ascii	"short unsigned int\000"
 2825      7420756E 
 2825      7369676E 
 2825      65642069 
 2825      6E7400
 2826              	.LASF61:
 2827 02ce 4379496E 		.ascii	"CyIntSetVector\000"
 2827      74536574 
 2827      56656374 
 2827      6F7200
 2828              	.LASF56:
 2829 02dd 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2829      5341525F 
 2829      5365715F 
 2829      315F6368 
 2829      616E6E65 
 2830              	.LASF52:
 2831 02fa 6D566F6C 		.ascii	"mVolts\000"
 2831      747300
 2832              	.LASF19:
 2833 0301 72656733 		.ascii	"reg32\000"
 2833      3200
 2834              	.LASF14:
 2835 0307 666C6F61 		.ascii	"float32\000"
 2835      74333200 
 2836              	.LASF21:
 2837 030f 73697A65 		.ascii	"sizetype\000"
 2837      74797065 
 2837      00
 2838              	.LASF41:
 2839 0318 6C6F774C 		.ascii	"lowLimit\000"
 2839      696D6974 
 2839      00
 2840              	.LASF20:
 2841 0321 6C6F6E67 		.ascii	"long double\000"
 2841      20646F75 
 2841      626C6500 
 2842              	.LASF33:
 2843 032d 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2843      5341525F 
 2843      5365715F 
 2843      315F4973 
 2843      456E6443 
 2844              	.LASF31:
 2845 034b 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2845      5341525F 
 2845      5365715F 
 2845      315F5374 
 2845      6F70436F 
 2846              	.LASF17:
 2847 0365 696E7436 		.ascii	"int64\000"
 2847      3400
 2848              	.LASF60:
 2849 036b 4379496E 		.ascii	"CyIntSetPriority\000"
 2849      74536574 
 2849      5072696F 
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 69


 2849      72697479 
 2849      00
 2850              	.LASF65:
 2851 037c 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2851      72617465 
 2851      645F536F 
 2851      75726365 
 2851      5C50536F 
 2852              	.LASF15:
 2853 03a3 666C6F61 		.ascii	"float\000"
 2853      7400
 2854              	.LASF48:
 2855 03a9 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2855      5341525F 
 2855      5365715F 
 2855      315F5365 
 2855      74476169 
 2856              	.LASF29:
 2857 03bf 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2857      5341525F 
 2857      5365715F 
 2857      315F5374 
 2857      6F7000
 2858              	.LASF43:
 2859 03d2 68696768 		.ascii	"highLimit\000"
 2859      4C696D69 
 2859      7400
 2860              	.LASF63:
 2861 03dc 43794861 		.ascii	"CyHalt\000"
 2861      6C7400
 2862              	.LASF1:
 2863 03e3 756E7369 		.ascii	"unsigned char\000"
 2863      676E6564 
 2863      20636861 
 2863      7200
 2864              	.LASF2:
 2865 03f1 73686F72 		.ascii	"short int\000"
 2865      7420696E 
 2865      7400
 2866              	.LASF54:
 2867 03fb 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2867      5341525F 
 2867      5365715F 
 2867      315F436F 
 2867      756E7473 
 2868              	.LASF38:
 2869 0418 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2869      5341525F 
 2869      5365715F 
 2869      315F5365 
 2869      74436861 
 2870              	.LASF22:
 2871 0432 63684E75 		.ascii	"chNum\000"
 2871      6D00
 2872              	.LASF36:
 2873 0438 6368616E 		.ascii	"chan\000"
 2873      00
ARM GAS  C:\Users\quint\AppData\Local\Temp\ccb80odf.s 			page 70


 2874              	.LASF18:
 2875 043d 63686172 		.ascii	"char\000"
 2875      00
 2876              	.LASF40:
 2877 0442 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2877      5341525F 
 2877      5365715F 
 2877      315F5365 
 2877      744C6F77 
 2878              	.LASF47:
 2879 045c 6F666673 		.ascii	"offset\000"
 2879      657400
 2880              	.LASF51:
 2881 0463 61646343 		.ascii	"adcCounts\000"
 2881      6F756E74 
 2881      7300
 2882              	.LASF59:
 2883 046d 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2883      5341525F 
 2883      5365715F 
 2883      315F636F 
 2883      756E7473 
 2884              	.LASF32:
 2885 048b 73746174 		.ascii	"status\000"
 2885      757300
 2886              	.LASF46:
 2887 0492 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2887      5341525F 
 2887      5365715F 
 2887      315F5365 
 2887      744F6666 
 2888              	.LASF12:
 2889 04aa 696E7431 		.ascii	"int16\000"
 2889      3600
 2890              	.LASF44:
 2891 04b0 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2891      5341525F 
 2891      5365715F 
 2891      315F5365 
 2891      744C696D 
 2892              	.LASF37:
 2893 04cb 72657375 		.ascii	"result\000"
 2893      6C7400
 2894              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
